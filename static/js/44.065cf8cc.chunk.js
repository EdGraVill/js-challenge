(this["webpackJsonpjs-challenge"]=this["webpackJsonpjs-challenge"]||[]).push([[44],{119:function(e){e.exports=JSON.parse('[{"answer":3,"explanation":["Dentro da fun\xe7\xe3o, n\xf3s primeiro declaramos a vari\xe1vel `name` usando a palavra-chave `var`. Isso significa que a variavel \xe9 elevada(hoisted) (O espa\xe7o na mem\xf3ria \xe9 separado durante a fase de cria\xe7\xe3o) com o valor padr\xe3o `undefined`, at\xe9 que chegue na linha onde definimos a vari\xe1vel. Ainda n\xe3o definimos a vari\xe1vel na linha onde tentamos usar colocar no log o valor da vari\xe1vel `name`, portanto ela ainda tem o valor `undefined`.","Vari\xe1veis com a palavra-chave `let` (e `const`) s\xe3o elevadas, mas diferente de `var`, n\xe3o s\xe3o <i>inicializadas</i>. Elas n\xe3o est\xe3o acess\xedveis antes da linha em que as declaramos (ou inicializamos). Esse \xe9 um conceito chamado de \\"temporal dead zone\\". Quando tentamos acessar essas vari\xe1veis antes de serem declaradas, o JavaScript lan\xe7a um `ReferenceError`."],"id":0,"options":["`Lydia` e `undefined`","`Lydia` e `ReferenceError`","`ReferenceError` e `21`","`undefined` e `ReferenceError`"],"problem":"function sayHi() {\\n  console.log(name);\\n  console.log(age);\\n  var name = \\"Lydia\\";\\n  let age = 21;\\n}\\n\\nsayHi();\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["Por causa da fila de eventos em JavaScript, a callback de `setTimeout` \xe9 chamada <i>depois</i> do la\xe7o ter sido executado. J\xe1 que a vari\xe1vel `i` no primeiro la\xe7o foi declarada usando a palavra-chave `var`, seu valor era global. Durante o la\xe7o, incrementamos o valor de `i` por `1` em cada repeti\xe7\xe3o, usando o operador un\xe1rio `++`. Quando a callback de `setTimeout` foi chamada, `i` valia `3`.","No segundo la\xe7o, a vari\xe1vel `i` foi declarada usando a palavra-chave `let`: Vari\xe1veis declaradas com `let` (e `const`) s\xf3 s\xe3o acess\xedveis nos escopos de seus blocos (um bloco \xe9 qualquer c\xf3digo entre `{ }`). Durante cada repeti\xe7\xe3o do la\xe7o, `i` vai ter um novo valor, e cada valor tem seu escopo dentro do la\xe7o."],"id":1,"options":["`0 1 2` e `0 1 2`","`0 1 2` e `3 3 3`","`3 3 3` e `0 1 2`"],"problem":"for (var i = 0; i < 3; i++) {\\n  setTimeout(() => console.log(i), 1);\\n}\\n\\nfor (let i = 0; i < 3; i++) {\\n  setTimeout(() => console.log(i), 1);\\n}\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["Perceba que o valor de `diameter` \xe9 uma fun\xe7\xe3o normal, enquanto que o valor de `perimeter` \xe9 uma arrow function.","Com arrow functions, a palavra-chave `this` faz refer\xeancia ao escopo atual em que est\xe1 inserida, diferente de fun\xe7\xf5es normais! Isso significa que quando n\xf3s chamamos `perimeter`, ela n\xe3o faz refer\xeancia ao objeto <i>shape</i>, mas ao seu escopo atual (por exemplo, <i>window</i>).","N\xe3o h\xe1 `radius` fora de <i>shape</i>, ent\xe3o retorna `undefined`."],"id":2,"options":["`20` e `62.83185307179586`","`20` e `NaN`","`20` e `63`","`NaN` e `63`"],"problem":"const shape = {\\n  radius: 10,\\n  diameter() {\\n    return this.radius * 2;\\n  },\\n  perimeter: () => 2 * Math.PI * this.radius\\n};\\n\\nshape.diameter();\\nshape.perimeter();\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["O operador un\xe1rio `+` tenta converter um operando para um n\xfamero. `true` \xe9 `1`, e `false` \xe9 `0`.","A string `\'Lydia\'` tem valor truthy*. O que estamos realmente perguntando \xe9 \\"Esse valor truthy \xe9 falsy?\\". Isso retorna `false`."],"id":3,"options":["`1` and `false`","`false` and `NaN`","`false` and `false`"],"problem":"+true;\\n!\\"Lydia\\";\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["No JavaScript, todas chaves dos objetos s\xe3o strings (a n\xe3o ser que sejam um s\xedmbolo). Ainda que n\xe3o possamos <i>digit\xe1-las</i> como strings, elas s\xe3o sempre convertidas para string sob o cap\xf4.","JavaScript interpreta afirma\xe7\xf5es. Quando usamos a nota\xe7\xe3o de colchetes, ele v\xea o colchete de abertura `[` e continua lendo at\xe9 encontrar o colchete que o fecha `]`. S\xf3 ent\xe3o vai avaliar e rodar as afirma\xe7\xf5es.","`mouse[bird.size]`: Primeiro avalia `bird.size`, que \xe9 `\\"small\\"`. `mouse[\\"small\\"]` retorna `true`","Por outro lado, com a nota\xe7\xe3o de ponto `.`, isso n\xe3o acontece. `mouse` n\xe3o tem uma chave chamada `bird`, o que significa que `mouse.bird` \xe9 `undefined`. Ent\xe3o, pedimos pelo `size` usando a nota\xe7\xe3o de ponto: `mouse.bird.size`. Uma vez que `mouse.bird` \xe9 `undefined`, estamos realmente pedindo `undefined.size`. Isso n\xe3o \xe9 v\xe1lido, e ir\xe1 gerar um erro similar a `Cannot read property \\"size\\" of undefined`."],"id":5,"options":["`mouse.bird.size` n\xe3o \xe9 v\xe1lido","`mouse[bird.size]` n\xe3o \xe9 v\xe1lido","`mouse[bird[\\"size\\"]]` n\xe3o \xe9 v\xe1lido","Todos s\xe3o v\xe1lidos"],"problem":"const bird = {\\n  size: \\"small\\"\\n};\\n\\nconst mouse = {\\n  name: \\"Mickey\\",\\n  small: true\\n};\\n","question":"Qual \xe9 a alternativa correta?"},{"answer":0,"explanation":["Em JavaScript, todos objetos interagem por <i>refer\xeancia</i> quando os colocamos um igual ao outro.","Primeiro, a vari\xe1vel `c` guarda o valor de um objeto. Depois, declaramos `d` com a mesma referencia que `c` tem para o objeto.","<img src=\\"https://i.imgur.com/ko5k0fs.png\\" width=\\"200\\">","Quando voc\xea muda um objeto, voc\xea muda todos eles."],"id":6,"options":["`Hello`","`Hey`","`undefined`","`ReferenceError`","`TypeError`"],"problem":"let c = { greeting: \\"Hey!\\" };\\nlet d;\\n\\nd = c;\\nc.greeting = \\"Hello\\";\\nconsole.log(d.greeting);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["`new Number()` \xe9 uma func\xe7\xe3o construtura padr\xe3o do JavaScript. Ainda que parece com um n\xfamero, n\xe3o \xe9 realmente um n\xfamero: Tem um monte de fun\xe7\xf5es extras e \xe9 um objeto.","Quando usamos o operador `==`, s\xf3 conferimos se ambas tem o mesmo <i>valor</i>. Ambas tem o valor de `3`, ent\xe3o retorna `true`.","Contudo, quando usamos o operador `===`, ambos valor <i>e</i> tipo tem de ser o mesmo. E n\xe3o s\xe3o: `new Number()` n\xe3o \xe9 um n\xfamero, \xe9 um **objeto**. Ambos retornam `false`."],"id":7,"options":["`true` `false` `true`","`false` `false` `true`","`true` `false` `false`","`false` `true` `true`"],"problem":"let a = 3;\\nlet b = new Number(3);\\nlet c = 3;\\n\\nconsole.log(a == b);\\nconsole.log(a === b);\\nconsole.log(b === c);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":3,"explanation":["A fun\xe7\xe3o `colorChange` \xe9 est\xe1tica. M\xe9todos est\xe1ticos s\xe3o designados para viver somente nos construtores em que s\xe3o criados, e filhos n\xe3o herdam esses m\xe9todos.\\nJ\xe1 que `freddie` \xe9 filho de `Chameleon`, a fun\xe7\xe3o n\xe3o \xe9 herdada, e n\xe3o est\xe1 dispon\xedvel para `freddie`: Um erro `TypeError` \xe9 gerado."],"id":8,"options":["`orange`","`purple`","`green`","`TypeError`"],"problem":"class Chameleon {\\n  static colorChange(newColor) {\\n    this.newColor = newColor;\\n    return this.newColor;\\n  }\\n\\n  constructor({ newColor = \\"green\\" } = {}) {\\n    this.newColor = newColor;\\n  }\\n}\\n\\nconst freddie = new Chameleon({ newColor: \\"purple\\" });\\nfreddie.colorChange(\\"orange\\");\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["Cria o log do objeto, pois criamos um objeto vazio no objeto global! Quando erramos a digita\xe7\xe3o de `greeting` como `greetign`, o interpretador do JavaScript viu isso como `global.greetign = {}` (ou `window.greetign = {}` em um navegador).","Para evitar esse comportamento, podemos usar `\\"use strict\\"`. Isso garante que voc\xea  tenha declarado uma vari\xe1vel antes de poder inicializ\xe1-la com algum valor."],"id":9,"options":["`{}`","`ReferenceErrorgreetign is not defined`","`undefined`"],"problem":"let greeting;\\ngreetign = {}; // Erro de digita\xe7\xe3o!\\nconsole.log(greetign);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["Isso \xe9 poss\xedvel em JavaScript, pois fun\xe7\xf5es s\xe3o objetos! (Tudo menos tipos primitivos s\xe3o objetos)","Uma fun\xe7\xe3o \xe9 um tipo especial de objeto. O c\xf3digo que voc\xea escreve n\xe3o \xe9 a verdadeira fun\xe7\xe3o. A fun\xe7\xe3o \xe9 um objeto com propriedades. E essa propriedade \xe9 invoc\xe1vel."],"id":10,"options":["Nada, isso \xe9 ok!","`SyntaxError`. N\xe3o se pode adicionar propriedades em uma fun\xe7\xe3o dessa maneira.","`undefined`","`ReferenceError`"],"problem":"function bark() {\\n  console.log(\\"Woof!\\");\\n}\\n\\nbark.animal = \\"dog\\";\\n","question":"O que acontece quando fazemos isso?"},{"answer":0,"explanation":["Voc\xea n\xe3o pode adicionar propriedades para um construtor igual aos objetos normais. Se voc\xea quer adicionar uma funcionalidade para todos objetos ao mesmo tempo, voc\xea deve usar o prototype.","Ent\xe3o nesse caso","faria `member.getFullName()` funcionar. Por qu\xea isso \xe9 beneficial? Digamos que tiv\xe9ssemos esse m\xe9todo no pr\xf3prio construtor. Talvez nem toda inst\xe2ncia de `Person` precisasse desse m\xe9todo. Isso gastaria muita mem\xf3ria, uma vez que cada inst\xe2ncia teria esse propriedade e teria seu espa\xe7o alocado. Ao inv\xe9s disso, se adicionarmos somente ao prot\xf3tipo, alocamos somente um \xfanico espa\xe7o na mem\xf3ria, e todas inst\xe2ncias de `Person` ainda tem acesso ao m\xe9todo."],"id":11,"options":["`TypeError`","`SyntaxError`","`Lydia Hallie`","`undefined` `undefined`"],"problem":"function Person(firstName, lastName) {\\n  this.firstName = firstName;\\n  this.lastName = lastName;\\n}\\n\\nconst member = new Person(\\"Lydia\\", \\"Hallie\\");\\nPerson.getFullName = function() {\\n  return `${this.firstName} ${this.lastName}`;\\n};\\n\\nconsole.log(member.getFullName());\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["Na `sarah`, n\xe3o usamos a palavra-chave `new`. Quando usamos `new`, se refere ao novo objeto vazio que criamos. Contudo, se n\xe3o usarmos `new`, nos referimos ao **objeto global**!","Afirmamos que `this.firstName` vale `\\"Sarah\\"` e `this.lastName` vale `\\"Smith\\"`. O que realmente fizemos foi definir `global.firstName = \'Sarah\'` e `global.lastName = \'Smith\'`. A `sarah` ainda \xe9 `undefined`."],"id":12,"options":["`Person {firstName\\"Lydia\\", lastName\\"Hallie\\"}` e `undefined`","`Person {firstName\\"Lydia\\", lastName\\"Hallie\\"}` e `Person {firstName\\"Sarah\\", lastName\\"Smith\\"}`","`Person {firstName\\"Lydia\\", lastName\\"Hallie\\"}` e `{}`","\\"Lydia\\", lastName\\"Hallie\\"}` e `ReferenceError`"],"problem":"function Person(firstName, lastName) {\\n  this.firstName = firstName;\\n  this.lastName = lastName;\\n}\\n\\nconst lydia = new Person(\\"Lydia\\", \\"Hallie\\");\\nconst sarah = Person(\\"Sarah\\", \\"Smith\\");\\n\\nconsole.log(lydia);\\nconsole.log(sarah);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":3,"explanation":["Durate a fase do **capturing**, o evento percorre os elementos pais at\xe9 chegar no elemento algo. Isso alcan\xe7a o elemento **target**, e o **bubbling** come\xe7a.","*Nota do tradutor: _bubbling_ descreve uma forma espec\xedfica de propaga\xe7\xe3o de eventos. Em tradu\xe7\xe3o livre \xe9 \\"borbulhar\\", que indica como os eventos \\"sobem\\" a cadeia onde est\xe3o aninhados, mas prefiro por manter o original, visto que \xe9 o nome dessa forma de propaga\xe7\xe3o.","<img src=\\"https://i.imgur.com/N18oRgd.png\\" width=\\"200\\">"],"id":13,"options":["Target > Capturing > Bubbling","Bubbling > Target > Capturing","Target > Bubbling > Capturing","Capturing > Target > Bubbling"],"problem":"","question":"Quais s\xe3o as tr\xeas fases na propaga\xe7\xe3o de eventos?"},{"answer":1,"explanation":["Todos objetos tem prot\xf3tipos, exceto pelo **base object**. O base object tem acesso \xe0 alguns m\xe9todos e propriedades, como `.toString`. \xc9 o motivo de podermos usar m\xe9todos j\xe1 embutidos no JavaScript! Todos m\xe9todos desse tipo j\xe1 est\xe3o embutidos no prot\xf3tipo. Apesar do JavaScript n\xe3o encontrar algum m\xe9todo diretamente no seu objeto, ele percorre a cadeia de prot\xf3tipos at\xe9 encontrar no base, o que torna acess\xedvel para todo objeto."],"id":14,"options":["Verdadeiro","Falso"],"problem":"","question":"Todos objetos tem prot\xf3tipos."},{"answer":2,"explanation":["JavaScript \xe9 uma **linguagem dinamicamente tipada**: N\xe3o especificamos quais tipos nossas vari\xe1veis s\xe3o. Valores pode ser automaticamente convertidos em outro tipo sem voc\xea saber, o que \xe9 chamado de <i>coer\xe7\xe3o implicita de tipo</i>. **Coer\xe7\xe3o** \xe9 converter de um tipo em outro.","Nesse exemplo, JavaScript converte o n\xfamero `1` em uma string, para que a fun\xe7\xe3o fa\xe7a sentido e retorne um valor. Durante a adi\xe7\xe3o de um tipo num\xe9rico (`1`) e uma string (`\'2\'`), o n\xfamero \xe9 tratado como uma string. Podemos concatenar strings como `\\"Hello\\" + \\"World\\"`, ent\xe3o o que est\xe1 acontecendo aqui \xe9 `\\"1\\" + \\"2\\"` que retorna `\\"12\\"`."],"id":15,"options":["`NaN`","`TypeError`","`\\"12\\"`","`3`"],"problem":"function sum(a, b) {\\n  return a + b;\\n}\\n\\nsum(1, \\"2\\");\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["O operador un\xe1rio no **sufixo**  `++`:","Retorna o valor (retorna o valor `0`)","Incrementa o valor (numero agora \xe9 `1`)","O operador un\xe1rio **prefixo** `++`:","Incrementa o valor (numero agora \xe9 `2`)","Retorna o valor (Retorna o valor `2`)","Isso retorna `0 2 2`."],"id":16,"options":["`1` `1` `2`","`1` `2` `2`","`0` `2` `2`","`0` `1` `2`"],"problem":"let number = 0;\\nconsole.log(number++);\\nconsole.log(++number);\\nconsole.log(number);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["Se usamos template literals marcadas, ou tagged template literals, o valor do primeiro argumento \xe9 sempre um array com a string, separada pelos tagged template liberals. Os argumentos restantes recebem os valores das express\xf5es passadas!"],"id":17,"options":["`\\"Lydia\\"` `21` `[\\"\\", \\" is \\", \\" years old\\"]`","`[\\"\\", \\" is \\", \\" years old\\"]` `\\"Lydia\\"` `21`","`\\"Lydia\\"` `[\\"\\", \\" is \\", \\" years old\\"]` `21`"],"problem":"function getPersonInfo(one, two, three) {\\n  console.log(one);\\n  console.log(two);\\n  console.log(three);\\n}\\n\\nconst person = \\"Lydia\\";\\nconst age = 21;\\n\\ngetPersonInfo`${person} is ${age} years old`;\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["Quando testamos igualdade, primitivos s\xe3o comparados por seus _valores_, enquanto objetos s\xe3o comparados por suas  _refer\xeancias_. O JavaScript confere se os objetos tem a refer\xeancia para o mesmo local na mem\xf3ria.","Os dois objetos que estamos comparando n\xe3o s\xe3o assim: O objeto que passamos como par\xe2metro faz refer\xeancia a uma posi\xe7\xe3o na mem\xf3ria diferente daquela que o objeto que usamos para conferir a igualdade.","\xc9 por isso que ambos `{ age: 18 } === { age: 18 }` E `{ age: 18 } == { age: 18 }` retornam `false`."],"id":18,"options":["`You are an adult!`","`You are still an adult.`","`Hmm.. You don\'t have an age I guess`"],"problem":"function checkAge(data) {\\n  if (data === { age: 18 }) {\\n    console.log(\\"You are an adult!\\");\\n  } else if (data == { age: 18 }) {\\n    console.log(\\"You are still an adult.\\");\\n  } else {\\n    console.log(`Hmm.. You don\'t have an age I guess`);\\n  }\\n}\\n\\ncheckAge({ age: 18 });\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["O operador _spread_ (`...args`.) retorna um array com os argumentos. Um array \xe9 um objeto, ent\xe3o `typeof args` retorna `\\"object\\"`."],"id":19,"options":["`\\"number\\"`","`\\"array\\"`","`\\"object\\"`","`\\"NaN\\"`"],"problem":"function getAge(...args) {\\n  console.log(typeof args);\\n}\\n\\ngetAge(21);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["Com `\\"use strict\\"`, voc\xea pode ter certeza que n\xe3o declarou vari\xe1veis globais. Nunca declaramos a vari\xe1vel `age`, e j\xe1 que usamos `\\"use strict\\"`, ira gerar um erro de refer\xeancia. Se n\xe3o tiv\xe9ssemos usado `\\"use strict\\"`, teria funcionado, uma vez que a propriedade `age` teria sido adicionada ao objeto global."],"id":20,"options":["`21`","`undefined`","`ReferenceError`","`TypeError`"],"problem":"function getAge() {\\n  \\"use strict\\";\\n  age = 21;\\n  console.log(age);\\n}\\n\\ngetAge();\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["`eval` executa o c\xf3digo mesmo se passado como string. Se \xe9 uma express\xe3o, como nesse caso, ele calcula a express\xe3o. A express\xe3o \xe9 `10 * 10 + 5`. Isso retorna o n\xfamero `105`."],"id":21,"options":["`105`","`\\"105\\"`","`TypeError`","`\\"10*10+5\\"`"],"problem":"const sum = eval(\\"10*10+5\\");\\n","question":"Qual o valor de `sum`?"},{"answer":1,"explanation":["Dados guardados em `sessionStorage` s\xe3o removidos depois de fechar a _guia_.","Se us\xe1ssemos `localStorage`, o dado seria guardado para sempre, exceto se `localStorage.clear()` fosse chamado."],"id":22,"options":["Sempre, o dado n\xe3o \xe9 perdido.","Quando o usu\xe1rio fechar a guia.","Quando o usu\xe1rio fechar o navegador inteiro.","Quando o usu\xe1rio desligar o computador."],"problem":"sessionStorage.setItem(\\"cool_secret\\", 123);\\n","question":"Por quanto tempo cool_secret \xe9 acess\xedvel?"},{"answer":1,"explanation":["Coma a palavra-chave `var`, voc\xea pode declarar v\xe1rias vari\xe1veis com o mesmo nome. A vari\xe1vel vai guardar o \xfaltimo valor.","Voc\xea n\xe3o pode fazer isso com `let` ou `const` uma vez que eles conferem o bloco de escopo em que est\xe3o inseridos."],"id":23,"options":["`8`","`10`","`SyntaxError`","`ReferenceError`"],"problem":"var num = 8;\\nvar num = 10;\\n\\nconsole.log(num);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["Todas as chaves de objetos (exceto s\xedmbolos) s\xe3o strings debaixo do cap\xf4, mesmo que voc\xea n\xe3o digite como uma string. \xc9 por isso que `obj.hasOwnProperty(\'1\')` tamb\xe9m retorna `true`.","N\xe3o funciona assim para `Set`. N\xe3o tem um `\'1\'` no nosso set: `set.has(\'1\')` retorna `false`. Temos o tipo n\xfamero `1`, ent\xe3o `set.has(1)` retorna `true`."],"id":24,"options":["`false` `true` `false` `true`","`false` `true` `true` `true`","`true` `true` `false` `true`","`true` `true` `true` `true`"],"problem":"const obj = { 1: \\"a\\", 2: \\"b\\", 3: \\"c\\" };\\nconst set = new Set([1, 2, 3, 4, 5]);\\n\\nobj.hasOwnProperty(\\"1\\");\\nobj.hasOwnProperty(1);\\nset.has(\\"1\\");\\nset.has(1);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["Se temos duas chaves com o mesmo nome, a \xfaltima ir\xe1 substituir a primeira. Ainda vai estar na primeira posi\xe7\xe3o, mas com o \xfaltimo valor espec\xedficado."],"id":25,"options":["`{ a\\"one\\", b\\"two\\" }`","`{ b\\"two\\", a\\"three\\" }`","`{ a\\"three\\", b\\"two\\" }`","`SyntaxError`"],"problem":"const obj = { a: \\"one\\", b: \\"two\\", a: \\"three\\" };\\nconsole.log(obj);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["O contexto base de execu\xe7\xe3o \xe9 o contexto global: \xc9 aquilo que est\xe1 acess\xedvel em qualquer lugar do c\xf3digo."],"id":26,"options":["Verdadeiro","Falso","Depende"],"problem":"","question":"O contexto global de execu\xe7\xe3o do JavaScript cria duas coisas para voc\xea: O objeto global, e a palavra-chave `this`."},{"answer":2,"explanation":["A palavra-chave `continue` pula uma itera\xe7\xe3o se a condi\xe7\xe3o retorna `true`."],"id":27,"options":["`1` `2`","`1` `2` `3`","`1` `2` `4`","`1` `3` `4`"],"problem":"for (let i = 1; i < 5; i++) {\\n  if (i === 3) continue;\\n  console.log(i);\\n}\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["`String` \xe9 um construtor embutido, no qual podemos adicionar propriedades. Nesse caso adicionamos um m\xe9todo ao seu prot\xf3tipo. Tipos primitivos `string` s\xe3o automaticamente convertidos em um objeto string, gerado pelo construtor `String`. Assim, todas as strings (que s\xe3o objetos string) tem acesso ao m\xe9todo."],"id":28,"options":["`\\"Just give Lydia pizza already!\\"`","`TypeErrornot a function`","`SyntaxError`","`undefined`"],"problem":"String.prototype.giveLydiaPizza = () => {\\n  return \\"Just give Lydia pizza already!\\";\\n};\\n\\nconst name = \\"Lydia\\";\\n\\nname.giveLydiaPizza();\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["Chaves de objeto s\xe3o automaticamente convertidas em strings. Estamos tentando usar um objeto como chave do objeto `a`, com o valor de `123`.","Contudo, quando transformamos um objeto em string, ele vira um `\\"[object Object]\\"`. Ent\xe3o, o que estamos afirmando \xe9 `a[\\"object Object\\"] = 123`. Ap\xf3s, tentamos a mesma coisa. `c` \xe9 outro objeto que (implicitamente) convertemos para string. Ent\xe3o, temos `a[\\"object Object\\"] = 456`.","Ent\xe3o, fazemos o log de `a[b]`, o que na verdade \xe9 `a[\\"object Object\\"]`. Acabmos de definir esse valor, como `456`, e \xe9 isso que ele retorna."],"id":29,"options":["`123`","`456`","`undefined`","`ReferenceError`"],"problem":"const a = {};\\nconst b = { key: \\"b\\" };\\nconst c = { key: \\"c\\" };\\n\\na[b] = 123;\\na[c] = 456;\\n\\nconsole.log(a[b]);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["Temos a fun\xe7\xe3o `setTimeout` e a invocamos por primeiro. Ainda assim, apareceu no log por \xfaltimo.","Isso acontece pois nos navegadores, n\xe3o temos apenas o nosso mecanismo de execu\xe7\xe3o (runtime engine), temos tamb\xe9m algo chamado `WebAPI`. A `WebAPI` nos da coisas como a `setTimeout` e o DOM.","Depois que a fun\xe7\xe3o de retorno (callback) \xe9 enviada para a `WebAPI`, a fun\xe7\xe3o `setTimeout` (mas n\xe3o seu retorno ou callback) s\xe3o enviadas para fora do stack.","<img src=\\"https://i.imgur.com/X5wsHOg.png\\" width=\\"200\\">","Agora, `foo` \xe9 chamada, e `\\"First\\"` \xe9 adicionado ao log.","<img src=\\"https://i.imgur.com/Pvc0dGq.png\\" width=\\"200\\">","`foo` \xe9 evniada para fora do stack, e `baz` \xe9 chamada. `\\"Third\\"` \xe9 adicionado ao log.","<img src=\\"https://i.imgur.com/WhA2bCP.png\\" width=\\"200\\">","A `WebAPI` n\xe3o pode simplesmente adicionar coisas ao stack sempre que ficam prontas. Ao inv\xe9s, disso, todo retorno que fica pronto \xe9 enviado para algo chamado _queue_.","<img src=\\"https://i.imgur.com/NSnDZmU.png\\" width=\\"200\\">","\xc9 aqui que um la\xe7o de evento come\xe7a a ocorrer. Um **la\xe7o de evento** confere o stack e o _queue_. Se o stack est\xe1 livre, pega a primeira coisa que estiver na queue e coloca no stack.","<img src=\\"https://i.imgur.com/uyiScAI.png\\" width=\\"200\\">","`bar` \xe9 chamada, `\\"Second\\"` \xe9 adicionado ao log, e \xe9 enviado para fora do stack."],"id":30,"options":["`First` `Second` `Third`","`First` `Third` `Second`","`Second` `First` `Third`","`Second` `Third` `First`"],"problem":"const foo = () => console.log(\\"First\\");\\nconst bar = () => setTimeout(() => console.log(\\"Second\\"));\\nconst baz = () => console.log(\\"Third\\");\\n\\nbar();\\nfoo();\\nbaz();\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["O elemento mais interno no aninhamento que causou o evento \xe9 o alvo do evento. Voc\xea pode parar o _bubbling_ com `event.stopPropagation`."],"id":31,"options":["A `div` mais externa","A `div` mais interna","`button`","Um array dos elementos aninhandos."],"problem":"<div onclick=\\"console.log(\'first div\')\\">\\n  <div onclick=\\"console.log(\'second div\')\\">\\n    <button onclick=\\"console.log(\'button\')\\">\\n      Click!\\n    </button>\\n  </div>\\n</div>\\n","question":"qual \xe9 o event.target quando clicamos no bot\xe3o?"},{"answer":0,"explanation":["Se clicarmos em `p`, veremos dois itens adicionaos ao log: `p` e `div`. Durante a propaga\xe7\xe3o de eventos, existem 3 fases: capturar, adquirir o _target_, e o bubbling. Por padr\xe3o, manipuladores de eventos s\xe3o executados junto a fase de bubbling (a n\xe3o ser que voc\xea marque `useCapture` como `true`). Percorre do elemento aninhando mais interno, propagando para fora."],"id":32,"options":["`p` `div`","`div` `p`","`p`","`div`"],"problem":"<div onclick=\\"console.log(\'div\')\\">\\n  <p onclick=\\"console.log(\'p\')\\">\\n    Click here!\\n  </p>\\n</div>\\n","question":"Quando voc\xea clica no par\xe1grafo, O que \xe9 adicionado ao log?"},{"answer":3,"explanation":["Com ambos, podemos passar o objeto que queremos que o `this` fa\xe7a refer\xeancia. Contudo, `.call` \xe9 _executado imediatamente_!","`.bind.` retorna uma _c\xf3pia_ da fun\xe7\xe3o, mas com seu contexto vinculado \xe0 c\xf3pia. E n\xe3o \xe9 executado imediatamente."],"id":33,"options":["`undefined is 21` `Lydia is 21`","`function` `function`","`Lydia is 21` `Lydia is 21`","`Lydia is 21` `function`"],"problem":"const person = { name: \\"Lydia\\" };\\n\\nfunction sayHi(age) {\\n  console.log(`${this.name} is ${age}`);\\n}\\n\\nsayHi.call(person, 21);\\nsayHi.bind(person, 21);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["A fun\xe7\xe3o `sayHi` retorna o valor retornado pela arrow function pois ela \xe9 uma IIFE (Immediately Invoked Function Expression ou Express\xe3o de Fun\xe7\xe3o Invocada Imediatamente). Essa IIFE retornou `0`, que \xe9 do tipo `\\"number\\"`.","Para saber mais: S\xf3 existem 7 tipos j\xe1 definidos: `null`, `undefined`, `boolean`, `number`, `string`, `object`, `symbol`, e `bigint`. `\\"function\\"` n\xe3o \xe9 um tipo, uma vez que  fun\xe7\xf5es s\xe3o objetos, elas s\xe3o do tipo `\\"object\\"`."],"id":34,"options":["`\\"object\\"`","`\\"number\\"`","`\\"function\\"`","`\\"undefined\\"`"],"problem":"function sayHi() {\\n  return (() => 0)();\\n}\\n\\ntypeof sayHi();\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["Existem somente seis valores falsy:","`undefined`","`null`","`NaN`","`0`","`\'\'` (string vazia)","`false`","Fun\xe7\xf5es construtoras, como `new Number` e `new Boolean` s\xe3o truthy."],"id":35,"options":["`0`, `\'\'`, `undefined`","`0`, `new Number(0)`, `\'\'`, `new Boolean(false)`, `undefined`","`0`, `\'\'`, `new Boolean(false)`, `undefined`","Todos s\xe3o falsy"],"problem":"0;\\nnew Number(0);\\n(\\"\\");\\n(\\" \\");\\nnew Boolean(false);\\nundefined;\\n","question":"Qual desses tem valor falsy?"},{"answer":1,"explanation":["`typeof 1` retorna `\\"number\\"`.\\n`typeof \\"number\\"` retorna `\\"string\\"`"],"id":36,"options":["`\\"number\\"`","`\\"string\\"`","`\\"object\\"`","`\\"undefined\\"`"],"problem":"console.log(typeof typeof 1);\\n","question":"Qual \xe9 a s\xe1ida?"},{"answer":2,"explanation":["Quando voc\xea define um valor para um elemento em um array que excede o tamanho do pr\xf3prio array, o JavaScript cria algo chamado \\"empty slots\\" (espa\xe7os vazios). Na verdade, esses espa\xe7os vazios tem o valor de `undefined`, mas voc\xea ver\xe1 algo como:","`[1, 2, 3, 7 x empty, 11]`","dependendo de onde voc\xea o executa, pois \xe9 diferente para cada navegador, node etc."],"id":37,"options":["`[1, 2, 3, 7 x null, 11]`","`[1, 2, 3, 11]`","`[1, 2, 3, 7 x empty, 11]`","`SyntaxError`"],"problem":"const numbers = [1, 2, 3];\\nnumbers[10] = 11;\\nconsole.log(numbers);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["O bloco do `catch` recebe o argumento `x`. Esse n\xe3o \xe9 o mesmo `x` da vari\xe1vel de quando estamos passando os argumentos. A vari\xe1vel `x` \xe9 de escopo do seu bloco.","Depois, definimos essa vari\xe1vel, dentro do seu bloco, para valor `1`, e definimos o valor de `y`, que pertence a um bloco maior. Agora, nos adicionamos ao log o valor de `x`, que dentro desse bloco tem valor `1`.","Fora do bloco do `catch`. `x` ainda \xe9 `undefined`, e `y` ainda \xe9 `2`. Quando tentamos usar `console.log(x)` fora do bloco do `catch`, isso retorna `undefined`, e `y` retorna `2`."],"id":38,"options":["`1` `undefined` `2`","`undefined` `undefined` `undefined`","`1` `1` `2`","`1` `undefined` `undefined`"],"problem":"(() => {\\n  let x, y;\\n  try {\\n    throw new Error();\\n  } catch (x) {\\n    (x = 1), (y = 2);\\n    console.log(x);\\n  }\\n  console.log(x);\\n  console.log(y);\\n})();\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["JavaScript tem somente tipos primitivos e objetos.","Tipos primitivos s\xe3o `boolean`, `null`, `undefined`, `bigint`, `number`, `string`, e `symbol`.","O que diferencia um primitivo de um objeto \xe9 que primitivos n\xe3o m\xe9todos ou propriedades. Contudo, se voc\xea est\xe1 atento vai lembrar que `\'foo\'.toUpperCase()` retorna `\'FOO\'` e n\xe3o resulta em um `TypeError`. Isso acontece pois quando voc\xea tenta acessar uma propriedade ou m\xe9todo em um primitivo como, por exemplo, uma string, JavaScript vai transformar esse primitivo em objeto usando um _wrapper_, nesse caso o `String`, e discarta o wrapper imediatamente ap\xf3s executar o m\xe9todo ou propriedade. Todos os primitivos, com exce\xe7\xe3o de `null` e `undefined` exibem esse comportamento."],"id":39,"options":["primitivo ou um objeto","fun\xe7\xe3o ou um object","Pegadinha! Somente objetos","n\xfamero ou um objeto"],"problem":"","question":"Tudo em JavaScript ou \xe9 um..."},{"answer":2,"explanation":["`[1, 2]` \xe9 nosso valor inicial. \xc9 o valor que come\xe7amos, e portanto o valor do primeiro `acc`. Durante a primeira itera\xe7\xe3o, `acc` \xe9 `[1,2]`, e `cur` \xe9 `[0, 1]`. N\xf3s concatemos ambos, o que resulta em `[1, 2, 0, 1]`.","Ent\xe3o, `[1, 2, 0, 1]` \xe9 `acc` e `[2, 3]` \xe9 o `cur`. Concatenamos novamente, e chegamos em `[1, 2, 0, 1, 2, 3]`."],"id":40,"options":["`[0, 1, 2, 3, 1, 2]`","`[6, 1, 2]`","`[1, 2, 0, 1, 2, 3]`","`[1, 2, 6]`"],"problem":"[[0, 1], [2, 3]].reduce(\\n  (acc, cur) => {\\n    return acc.concat(cur);\\n  },\\n  [1, 2]\\n);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["`null` \xe9 falsy. `!null` retorna `true`. `!true` retorna `false`.","`\\"\\"` \xe9 falsy. `!\\"\\"` retorna `true`. `!true` retorna `false`.","`1` \xe9 truthy. `!1` retorna `false`. `!false` retorna `true`."],"id":41,"options":["`false` `true` `false`","`false` `false` `true`","`false` `true` `true`","`true` `true` `false`"],"problem":"!!null;\\n!!\\"\\";\\n!!1;\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["Retorna um id \xfanico. Esse id pode ser usado para limpar o intervalo com a fun\xe7\xe3o `clearInterval()`."],"id":42,"options":["um id \xfanico","a quantidade de  millisegundos especificada","a fun\xe7\xe3o passada","`undefined`"],"problem":"setInterval(() => console.log(\\"Hi\\"), 1000);\\n","question":"O que o m\xe9todo `setInterval` retorna no navegador?"},{"answer":0,"explanation":["Strings s\xe3o iter\xe1veis. O operador do spread `...` mapeia todo caract\xe9re de um iter\xe1vel para um elemento."],"id":43,"options":["`[\\"L\\", \\"y\\", \\"d\\", \\"i\\", \\"a\\"]`","`[\\"Lydia\\"]`","`[[], \\"Lydia\\"]`","`[[\\"L\\", \\"y\\", \\"d\\", \\"i\\", \\"a\\"]]`"],"problem":"[...\\"Lydia\\"];\\n","question":"Qual \xe9 o retorno?"},{"answer":2,"explanation":["Fun\xe7\xf5es regulares n\xe3o podem ser interrompidas durante execu\xe7\xe3o ap\xf3s sua invoca\xe7\xe3o. Entretanto, uma fun\xe7\xe3o generator pode ser interrompida, e depois continuar de onde parou. Uma fun\xe7\xe3o generator sempre possue a palavra chave `yield`, a fun\xe7\xe3o gera o valor espec\xedficado logo ap\xf3s. Note que a fun\xe7\xe3o generator, neste caso n\xe3o retorna o valor, ele utiliza _yields_ no valor.","Primeiro, n\xf3s inicializamos a fun\xe7\xe3o generator com `i` igual a `10`. N\xf3s chamamos a fun\xe7\xe3o generator utilizando o `next()` para pr\xf3xima fun\xe7\xe3o. A primeira vez que executamos a fun\xe7\xe3o generator o `i` \xe9 igual a `10`. que possue a palavra chave `yield`: que atribue o yields ao valor de `i`. O generator \xe9 pausado e `10` \xe9 logado.","Ent\xe3o, chamamos a pr\xf3xima fun\xe7\xe3o novamente com o `next()`. Que continua de onde foi interrompido anteirormente, ainda com `i` igual a `10`. Agora, ele encontra o pr\xf3ximo `yield`, e yields `i * 2`. `i` \xe9 igual a `10`, que ent\xe3o retorna `10 * 2`, que \xe9 `20`. Seu resultado \xe9 `10, 20`."],"id":44,"options":["`[0, 10], [10, 20]`","`20, 20`","`10, 20`","`0, 10 e 10, 20`\\n<details><summary><b>Resposta</b></summary>\\n<p>"],"problem":"function* generator(i) {\\n  yield i;\\n  yield i * 2;\\n}\\n\\nconst gen = generator(10);\\n\\nconsole.log(gen.next().value);\\nconsole.log(gen.next().value);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["Quando passamos m\xfaltiplas \\"promises\\" para a fun\xe7\xe3o `Promise.race`, ele resolve ou rejeita a primeira \\"promise\\". Para a fun\xe7\xe3o de `setTimeout`, n\xf3s passamos um tempo de 500ms para a primeira promise (`firstPromise`), e 100ms para a segunda promise (`secondPromise`). Isso significa que o `secondPromise` resolve primeiro com o valor de `\'two\'`. `res` que agora possui o valor `\'two\'`, que foi logado."],"id":45,"options":["`\\"one\\"`","`\\"two\\"`","`\\"two\\" \\"one\\"`","`\\"one\\" \\"two\\"`"],"problem":"const firstPromise = new Promise((res, rej) => {\\n  setTimeout(res, 500, \\"one\\");\\n});\\n\\nconst secondPromise = new Promise((res, rej) => {\\n  setTimeout(res, 100, \\"two\\");\\n});\\n\\nPromise.race([firstPromise, secondPromise]).then(res => console.log(res));\\n","question":"Qual o retorno?"},{"answer":3,"explanation":["Primeiro, declaramos a vari\xe1vel `person` com o valor de um objeto que possui o propriedade `name`.","<img src=\\"https://i.imgur.com/TML1MbS.png\\" width=\\"200\\">","Ent\xe3o, declaramos a vari\xe1vel chamada `members`. Setamos o valor do primeiro elemento do array igual ao valor da vari\xe1vel `person`. Objetos interados por _refer\xeancia_ quando ao defini-los iguais entre si. Quando voc\xea atribui uma refer\xeancia de uma vari\xe1vel para outra, voc\xea faz uma _c\xf3pia_ de sua refer\xeancia. (note que eles n\xe3o possuem a _mesma_ refer\xeancia!)","<img src=\\"https://i.imgur.com/FSG5K3F.png\\" width=\\"300\\">","Ent\xe3o, setamos a vari\xe1vel `person` igual a `null`.","<img src=\\"https://i.imgur.com/sYjcsMT.png\\" width=\\"300\\">","Estamos apenas modificando o valor da vari\xe1vel `person`, e n\xe3o o primeiro elemento do array, desde que o elemento tem uma diferente refer\xeancia (copiada) de um objeto. O primeiro elemento de `members` ainda mant\xe9m sua refer\xeancia com o objeto original. Quando logamos o array de `members`, o primeiro elemento ainda mant\xe9m o valor do objeto, que \xe9 logado."],"id":46,"options":["`null`","`[null]`","`[{}]`","`[{ name\\"Lydia\\" }]`"],"problem":"let person = { name: \\"Lydia\\" };\\nconst members = [person];\\nperson = null;\\n\\nconsole.log(members);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["Utilizando o loop `for-in`, podemos interar atrav\xe9s das chaves do objeto, neste caso o `name` e `age`. Por baixo dos panos, chaves de objetos s\xe3o strings (eles n\xe3o s\xe3o um s\xedmbolo). Em cada loop, setamos ao valor do `item` igual ao da chave atual, que se intera. Primeiro, `item` \xe9 igual ao `name`, e \xe9 logado. Ent\xe3o, `item` \xe9 igual a idade `age`, que \xe9 logado."],"id":47,"options":["`{ name\\"Lydia\\" }, { age21 }`","`\\"name\\", \\"age\\"`","`\\"Lydia\\", 21`","`[\\"name\\", \\"Lydia\\"], [\\"age\\", 21]`"],"problem":"const person = {\\n  name: \\"Lydia\\",\\n  age: 21\\n};\\n\\nfor (const item in person) {\\n  console.log(item);\\n}\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["Associatividade do operador \xe9 a ordem na qual o compilador avalia as express\xf5es, ou esquerda-para-direita ou direita-para-esquerda. Isso apenas acontece se todos os operatores possuem a _mesma_ preced\xeancia. Apenas temos um tipo de operador: `+`. Para adi\xe7\xe3o, a associatividade \xe9 esquerda-para-direita.","`3 + 4` \xe9 avaliado primeiro. Seu resultado \xe9 o n\xfamero `7`.","`7 + \'5\'` resulta em `\\"75\\"` por causa da coer\xe7\xe3o. JavaScript converte o n\xfamero `7` em string, veja a quest\xe3o 15. Podemos concatenar duas strings com o operador de `+`. `\\"7\\" + \\"5\\"` resulta em `\\"75\\"`."],"id":48,"options":["`\\"345\\"`","`\\"75\\"`","`12`","`\\"12\\"`"],"problem":"console.log(3 + 4 + \\"5\\");\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["Apenas os primeiros n\xfameros da string \xe9 retornado. Baseado no _radix_ (o segundo parametro na ordem especifica qual o tipo de n\xfamero queremos atribuir o parse: base 10, hexadecimal, octal, binary, etc.), o `parseInt` checa se os caracteres na string s\xe3o v\xe1lidos. Depois de encontrar um caracter que n\xe3o \xe9 um n\xfamero v\xe1lido no radix, ele interrompe o parse e ignora os seguintes caracteres.","`*` n\xe3o \xe9 um n\xfamero v\xe1lido. Ele apenas usa o parse no `\\"7\\"` em decimal `7`. `num` possui o valor `7`."],"id":49,"options":["`42`","`\\"42\\"`","`7`","`NaN`"],"problem":"const num = parseInt(\\"7*6\\", 10);\\n","question":"Qual o retorno de `num`?"},{"answer":2,"explanation":["Quando mapeamos um array (map), o valor de `num` \xe9 igual ao elemento que est\xe1 percorrendo. Neste caso, os elementos s\xe3o n\xfameros, ent\xe3o a condi\xe7\xe3o do se (if) `typeof num === \\"number\\"` retorna `true`. A fun\xe7\xe3o map cria um novo array e insere os valores retornados da fun\xe7\xe3o.","Entretanto, n\xe3o se retorna o valor. Quando n\xe3o se retorna um valor para a fun\xe7\xe3o, a fun\xe7\xe3o retorna `undefined`. Para cada elemento do array, o bloco de fun\xe7\xe3o \xe9 chamado, ent\xe3o para cada elemento \xe9 retornado `undefined`."],"id":50,"options":["`[]`","`[null, null, null]`","`[undefined, undefined, undefined]`","`[ 3 x empty ]`"],"problem":"[1, 2, 3].map(num => {\\n  if (typeof num === \\"number\\") return;\\n  return num * 2;\\n});\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["Os argumentos s\xe3o passados \u200b\u200bpor _valor_. Por\xe9m, se seu valor for um objeto, eles s\xe3o passados \u200b\u200bpor _refer\xeancia_. `birthYear` \xe9 passado por valor, j\xe1 que \xe9 uma string, n\xe3o um objeto. Quando passamos argumentos por valor, uma _c\xf3pia_ desse valor \xe9 criada (consulte a pergunta 46).","A vari\xe1vel `birthYear` tem uma refer\xeancia ao valor `\\"1997\\"`. O argumento `year` tamb\xe9m tem uma refer\xeancia ao valor `\\"1997\\"`, mas n\xe3o \xe9 o mesmo valor de refer\xeancia de `birthYear`. Quando atualizamos o valor de `year`, definindo ` year` igual a `\\"1998\\"`, estamos apenas atualizando o valor de `year`. `birthYear` ainda \xe9 igual a `\\"1997\\"`.","O valor de `person` \xe9 um objeto. O argumento `member` possui uma refer\xeancia (copiada) do _mesmo_ objeto . Quando modificamos uma propriedade do objeto que `member` tem refer\xeancia, o valor de `person` tamb\xe9m ser\xe1 modificado, pois ambos tem refer\xeancia ao mesmo objeto. A propriedade `name` de `person` agora \xe9 igual ao valor `\\"Lydia\\"`."],"id":51,"options":["`{ name\\"Lydia\\" }, \\"1997\\"`","`{ name\\"Sarah\\" }, \\"1998\\"`","`{ name\\"Lydia\\" }, \\"1998\\"`","`{ name\\"Sarah\\" }, \\"1997\\"`"],"problem":"function getInfo(member, year) {\\n  member.name = \\"Lydia\\";\\n  year = \\"1998\\";\\n}\\nconst person = { name: \\"Sarah\\" };\\nconst birthYear = \\"1997\\";\\ngetInfo(person, birthYear);\\nconsole.log(person, birthYear);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":3,"explanation":["Com a declara\xe7\xe3o `throw`, podemos criar erros personalizados. Com esta declara\xe7\xe3o, voc\xea pode lan\xe7ar exce\xe7\xf5es. Uma exce\xe7\xe3o pode ser uma <b>string</b>, um <b>n\xfamero</b>, um <b>booleano</b> ou um <b>objeto</b>. Nesse caso, nossa exce\xe7\xe3o \xe9 a string `\'Hello world!\'`.","Com a declara\xe7\xe3o `catch`, podemos especificar o que fazer se uma exce\xe7\xe3o for lan\xe7ada no bloco `try`. Uma exce\xe7\xe3o foi lan\xe7ada: a string `\'Hello world\'`. `e` agora \xe9 igual a essa string que registramos. Isso resulta em `\'Oh no an error: Hello world!\'`."],"id":52,"options":["`It worked! Hello world!`","`Oh no an errorundefined`","`SyntaxErrorcan only throw Error objects`","`Oh no an errorHello world!`"],"problem":"function greeting() {\\n  throw \\"Hello world!\\";\\n}\\nfunction sayHi() {\\n  try {\\n    const data = greeting();\\n    console.log(\\"It worked!\\", data);\\n  } catch (e) {\\n    console.log(\\"Oh no an error:\\", e);\\n  }\\n}\\nsayHi();\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["Quando voc\xea retorna uma propriedade, o valor da propriedade \xe9 igual ao valor _retornado_, n\xe3o ao valor _definido_ na fun\xe7\xe3o do construtor. Retornamos a string `\\"Maserati\\"`, ent\xe3o `myCar.make` \xe9 igual a `\\"Maserati\\"`."],"id":53,"options":["`\\"Lamborghini\\"`","`\\"Maserati\\"`","`ReferenceError`","`TypeError`"],"problem":"function Car() {\\n  this.make = \\"Lamborghini\\";\\n  return { make: \\"Maserati\\" };\\n}\\nconst myCar = new Car();\\nconsole.log(myCar.make);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["`let x = y = 10;` \xe9 na realidade uma abrevia\xe7\xe3o de:","Quando definimos `y` igual a `10`, adicionamos na verdade uma propriedade `y` ao objeto global (`window` no navegador, `global` no Node). Em um navegador, `window.y` agora \xe9 igual a `10`.","Ent\xe3o, declaramos uma vari\xe1vel `x` com o valor de `y`, que \xe9 `10`. As vari\xe1veis \u200b\u200bdeclaradas com `let` tem _escopo definido no bloco_ ou seja, s\xe3o definidas apenas dentro do bloco em que s\xe3o declaradas, neste caso, _immediately-invoked function_ (IIFE). Quando usamos o operador `typeof`, o operando `x` n\xe3o est\xe1 definido: estamos tentando acessar `x` fora do bloco em que est\xe1 declarado. Isso significa que `x` n\xe3o est\xe1 definido. Os valores que n\xe3o foram atribu\xeddos ou declarados a um valor s\xe3o do tipo `\\"undefined\\"`. `console.log(typeof x)` retorna `\\"undefined\\"`.","No entanto, criamos uma vari\xe1vel global `y` ao definir `y` igual a `10`. Este valor est\xe1 acess\xedvel em qualquer lugar do nosso c\xf3digo. `y` \xe9 definido e mant\xe9m um valor do tipo `\\"number\\"`. `console.log(typeof y)` retorna `\\"number\\"`."],"id":54,"options":["`\\"undefined\\", \\"number\\"`","`\\"number\\", \\"number\\"`","`\\"object\\", \\"number\\"`","`\\"number\\", \\"undefined\\"`"],"problem":"(() => {\\n  let x = (y = 10);\\n})();\\nconsole.log(typeof x);\\nconsole.log(typeof y);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["Podemos excluir propriedades de objetos usando `delete`, tamb\xe9m no prototype. Ao excluir uma propriedade no prototype, ela n\xe3o est\xe1 mais dispon\xedvel na cadeia de prototypes. Nesse caso, a fun\xe7\xe3o `bark` n\xe3o est\xe1 mais dispon\xedvel no prototype depois de `delete Dog.prototype.bark`, mas ainda tentamos acess\xe1-lo.","Quando tentamos invocar algo que n\xe3o \xe9 uma fun\xe7\xe3o, um `TypeError` \xe9 lan\xe7ado. Neste caso, `TypeError: pet.bark is not a function`, uma vez que `pet.bark` \xe9 `undefined`."],"id":55,"options":["`\\"Woof I am Mara\\"`, `TypeError`","`\\"Woof I am Mara\\"`, `\\"Woof I am Mara\\"`","`\\"Woof I am Mara\\"`, `undefined`","`TypeError`, `TypeError`"],"problem":"class Dog {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n}\\nDog.prototype.bark = function() {\\n  console.log(`Woof I am ${this.name}`);\\n};\\nconst pet = new Dog(\\"Mara\\");\\npet.bark();\\ndelete Dog.prototype.bark;\\npet.bark();\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":3,"explanation":["O objeto `Set` \xe9 uma cole\xe7\xe3o de valores _exclusivos_ : um valor pode ocorrer apenas uma vez.","Passamos o iter\xe1vel `[1, 1, 2, 3, 4]` com um valor `1` duplicado. Como n\xe3o podemos ter dois dos mesmos valores em um conjunto, um deles \xe9 removido. Isso resulta em `{1, 2, 3, 4}`."],"id":56,"options":["`[1, 1, 2, 3, 4]`","`[1, 2, 3, 4]`","`{1, 1, 2, 3, 4}`","`{1, 2, 3, 4}`"],"problem":"const set = new Set([1, 1, 2, 3, 4]);\\nconsole.log(set);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["Um m\xf3dulo importado \xe9 _somente leitura_: voc\xea n\xe3o pode modificar o m\xf3dulo importado. Somente o m\xf3dulo que os exporta pode alterar seu valor.","Quando tentamos aumentar o valor de `myCounter`, recebemos um erro: `myCounter` \xe9 somente leitura e n\xe3o pode ser modificado."],"id":57,"options":["`10`","`11`","`Error`","`NaN`"],"problem":"// counter.js\\nlet counter = 10;\\nexport default counter;\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["O operador `delete` retorna um valor booleano: `true` em uma exclus\xe3o bem-sucedida, caso contr\xe1rio, ele retorna `false`. No entanto, vari\xe1veis declaradas com `var`, `const` ou `let` n\xe3o podem ser exclu\xeddas usando o operador `delete`.","A vari\xe1vel `name` foi declarada com `const`, portanto sua exclus\xe3o n\xe3o \xe9 bem-sucedida: `false` \xe9 retornado. Quando definimos `age` igual a `21`, na verdade adicionamos uma propriedade chamada `age` para o objeto global. Dessa forma, voc\xea pode excluir propriedades dos objetos, portanto `delete age` returns `true`."],"id":58,"options":["`false`, `true`","`\\"Lydia\\"`, `21`","`true`, `true`","`undefined`, `undefined`"],"problem":"const name = \\"Lydia\\";\\nage = 21;\\nconsole.log(delete name);\\nconsole.log(delete age);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["Podemos descompactar valores de matrizes ou propriedades de objetos atrav\xe9s da desestrutura\xe7\xe3o. Por exemplo:","<img src=\\"https://i.imgur.com/ADFpVop.png\\" width=\\"200\\">","O valor de `a` agora \xe9 `1` e o valor de `b` agora \xe9 `2`. O que realmente fizemos na pergunta \xe9:","<img src=\\"https://i.imgur.com/NzGkMNk.png\\" width=\\"200\\">","Isso significa que o valor de `y` \xe9 igual ao primeiro valor no array, que \xe9 o n\xfamero `1`. Quando registramos no console `y`, `1` \xe9 retornado."],"id":59,"options":["`[[1, 2, 3, 4, 5]]`","`[1, 2, 3, 4, 5]`","`1`","`[1]`"],"problem":"const numbers = [1, 2, 3, 4, 5];\\nconst [y] = numbers;\\nconsole.log(y);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["\xc9 poss\xedvel combinar objetos usando o operador o spread operator `...`. Ele permite criar c\xf3pias dos pares de um objeto e adicion\xe1-las a outro objeto. Nesse caso, criamos c\xf3pias do objeto `user` e as adicionamos ao objeto `admin`. O objeto `admin` agora cont\xe9m os pares de chave/valor copiados, o que resulta em `{ admin: true, name: \\"Lydia\\", age: 21 }`."],"id":60,"options":["`{ admintrue, user{ name\\"Lydia\\", age21 } }`","`{ admintrue, name\\"Lydia\\", age21 }`","`{ admintrue, user[\\"Lydia\\", 21] }`","`{ admintrue }`"],"problem":"const user = { name: \\"Lydia\\", age: 21 };\\nconst admin = { admin: true, ...user };\\nconsole.log(admin);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["Com o m\xe9todo `defineProperty`, podemos adicionar novas propriedades a um objeto ou modificar propriedades j\xe1 existentes. Quando adicionamos uma propriedade a um objeto usando o m\xe9todo `defineProperty`, ela \xe9, por padr\xe3o, _n\xe3o enumer\xe1vel_. O m\xe9todo`Object.keys` retorna todos os nomes de uma propriedade _enumer\xe1vel_  de um objeto. Nesse caso, apenas `\\"name\\"`.","Propriedades adicionadas usando o m\xe9todo `defineProperty` s\xe3o imut\xe1veis por padr\xe3o. Voc\xea pode sobrepor esse comportamento usando as propriedade `writable`, `configurable` e `enumerable`. \\nAssim, o m\xe9todo `defineProperty` d\xe1 a voc\xea muito mais controle sobre as propriedades que voc\xea est\xe1 adicionando a um objeto.\\n</p>\\n</details>"],"id":61,"options":["`{ name\\"Lydia\\", age21 }`, `[\\"name\\", \\"age\\"]`","`{ name\\"Lydia\\", age21 }`, `[\\"name\\"]`","`{ name\\"Lydia\\"}`, `[\\"name\\", \\"age\\"]`","`{ name\\"Lydia\\"}`, `[\\"age\\"]`"],"problem":"const person = { name: \\"Lydia\\" };\\n\\nObject.defineProperty(person, \\"age\\", { value: 21 });\\n\\nconsole.log(person);\\nconsole.log(Object.keys(person));\\n","question":"Qual \xe9 sa\xedda?"},{"answer":0,"explanation":["O segundo argumento de `JSON.stringify` \xe9 o _substituo_. O substituto pode ser uma fun\xe7\xe3o ou um array, e deixa voc\xea controlar o que deve ser \\"stringfied\\", isto \xe9, ser usado pelo m\xe9todo `JSON.stringfy`.","Se o substituto (replacer) for um _array_, apenas os nomes de propriedades inclu\xeddos no array ser\xe3o adicionados \xe0 string JSON. Nesse caso, apenas as propriedades com os nomes `\\"level\\"` ed `\\"health\\"` s\xe3o inclu\xedda, `\\"username\\"` \xe9 exclu\xedda. `data` agora \xe9 igual a `\\"{\\"level\\":19, \\"health\\":90}\\"`.","Se o substituto (replacer) for uma _fun\xe7\xe3o_, essa fun\xe7\xe3o \xe9 chamada em c ada propriedade no objeto que est\xe1 sendo \\"Stringfied\\". O valor retornado dessa fun\xe7\xe3o ser\xe1 o valor da propriedade quanto adicionado \xe0 string JSON. Se o valor for `undefined`, essa propriedade \xe9 exclu\xedda da string JSON.\\n</p>\\n</details>"],"id":62,"options":["`\\"{\\"level\\":19, \\"health\\":90}\\"`","`\\"{\\"username\\"\\"lydiahallie\\"}\\"`","`\\"[\\"level\\", \\"health\\"]\\"`","`\\"{\\"username\\"\\"lydiahallie\\", \\"level\\":19, \\"health\\":90}\\"`"],"problem":"const settings = {\\n  username: \\"lydiahallie\\",\\n  level: 19,\\n  health: 90\\n};\\n\\nconst data = JSON.stringify(settings, [\\"level\\", \\"health\\"]);\\nconsole.log(data);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["O operador un\xe1rio `++` primeiro _retorna_ o valor do operando, depois _incrementa_ esse valor. O valor de `num1` \xe9 `10`, pois a fun\xe7\xe3o `increaseNumber` retorna primeiro o valor de` num`, que \xe9 `10`, e apenas incrementa o valor de `num` posteriormente.","`num2` \xe9 `10`, j\xe1 que passamos `num1` para o `increasePassedNumber`. `number` \xe9 igual a` 10` (o valor de `num1`. Novamente, o operador un\xe1rio `++` primeiro _retorna_ o valor do operando, depois _aumenta_ esse valor. O valor de` number` \xe9 `10`, ent\xe3o `num2` \xe9 igual a `10`."],"id":63,"options":["`10`, `10`","`10`, `11`","`11`, `11`","`11`, `12`"],"problem":"let num = 10;\\n\\nconst increaseNumber = () => num++;\\nconst increasePassedNumber = number => number++;\\n\\nconst num1 = increaseNumber();\\nconst num2 = increasePassedNumber(num1);\\n\\nconsole.log(num1);\\nconsole.log(num2);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["No ES6, podemos inicializar par\xe2metros com um valor padr\xe3o. O valor do par\xe2metro ser\xe1 o valor padr\xe3o, se nenhum outro valor tiver sido passado para a fun\xe7\xe3o ou se o valor do par\xe2metro for `\\"undefined\\"`. Nesse caso, espalhamos (spread) as propriedades do objeto `value` para um novo objeto, para que `x` tenha o valor padr\xe3o de `{number: 10}`.","O argumento padr\xe3o \xe9 executado _a cada chamada_! Toda vez que chamamos a fun\xe7\xe3o, um _novo_ objeto \xe9 criado. Invocamos a fun\xe7\xe3o `multiply` as duas primeiras vezes sem passar um valor: `x` tem o valor padr\xe3o de `{number: 10}`. Em seguida, registramos (log) o valor multiplicado desse n\xfamero, que \xe9 `20`.","Na terceira vez que invocamos multiply, passamos um argumento: o objeto chamado `value`. O operador `*=` \xe9 na verdade uma abrevia\xe7\xe3o de `x.number = x.number * 2`: modificamos o valor de `x.number` e registramos (log) o valor multiplicado `20`.","Na quarta vez, passamos o objeto `value` novamente. `x.number` foi modificado anteriormente para `20`, ent\xe3o `x.number *= 2` registra `40`."],"id":64,"options":["`20`, `40`, `80`, `160`","`20`, `40`, `20`, `40`","`20`, `20`, `20`, `40`","`NaN`, `NaN`, `20`, `40`"],"problem":"const value = { number: 10 };\\n\\nconst multiply = (x = { ...value }) => {\\n  console.log((x.number *= 2));\\n};\\n\\nmultiply();\\nmultiply();\\nmultiply(value);\\nmultiply(value);\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":3,"explanation":["O primeiro argumento que o m\xe9todo `reduce` recebe \xe9 o _acumulador_, `x` neste caso. O segundo argumento \xe9 o _valor atual_, `y`. Com o m\xe9todo `reduce`, executamos uma fun\xe7\xe3o de retorno de chamada (callback function) em todos os elementos da matriz, o que pode resultar em um \xfanico valor.","Neste exemplo, n\xe3o estamos retornando nenhum valor, estamos simplesmente registrando os valores do acumulador e o valor atual.","O valor do acumulador \xe9 igual ao valor retornado anteriormente da fun\xe7\xe3o de retorno de chamada (callback function). Se voc\xea n\xe3o passar o argumento opcional `initialValue` para o m\xe9todo `reduce`, o acumulador ser\xe1 igual ao primeiro elemento na primeira chamada.","Na primeira chamada, o acumulador (`x`) \xe9 `1` e o valor atual (`y`) \xe9 `2`. N\xe3o retornamos da fun\xe7\xe3o de retorno de chamada, registramos o acumulador e o valor atual: `1` e` 2` s\xe3o registrados.","Se voc\xea n\xe3o retornar um valor de uma fun\xe7\xe3o, ele retornar\xe1 `undefined`. Na pr\xf3xima chamada, o acumulador \xe9 \\"undefined\\" e o valor atual \xe9 \\"3\\". `undefined` e `3` s\xe3o registrados.","Na quarta chamada, novamente n\xe3o retornamos nada da fun\xe7\xe3o de retorno de chamada. O acumulador \xe9 novamente `undefined` e o valor atual \xe9 `4`. `undefined` e `4` s\xe3o registrados."],"id":65,"options":["`1` `2` and `3` `3` and `6` `4`","`1` `2` and `2` `3` and `3` `4`","`1` `undefined` and `2` `undefined` and `3` `undefined` and `4` `undefined`","`1` `2` and `undefined` `3` and `undefined` `4`"],"problem":"[1, 2, 3, 4].reduce((x, y) => console.log(x, y));\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":1,"explanation":["Em uma classe derivada, voc\xea n\xe3o pode acessar a palavra-chave `this` antes de chamar `super`. Se voc\xea tentar fazer isso, ele lan\xe7ar\xe1 um erro de refer\xeancia (ReferenceError): 1 e 4 lan\xe7ar\xe1 um erro de refer\xeancia.","Com a palavra-chave `super`, chamamos o construtor dessa classe pai com os argumentos fornecidos. O construtor do pai recebe o argumento `name`, portanto, precisamos passar `name` para `super`.","A classe `Labrador` recebe dois argumentos, `name`, pois estende `Dog`, e `size` como uma propriedade extra na classe `Labrador`. Ambos precisam ser passados para a fun\xe7\xe3o construtora no `Labrador`, que \xe9 feita corretamente usando o construtor 2."],"id":66,"options":["1","2","3","4"],"problem":"class Dog {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n};\\n\\nclass Labrador extends Dog {\\n  // 1\\n  constructor(name, size) {\\n    this.size = size;\\n  }\\n  // 2\\n  constructor(name, size) {\\n    super(name);\\n    this.size = size;\\n  }\\n  // 3\\n  constructor(size) {\\n    super(name);\\n    this.size = size;\\n  }\\n  // 4\\n  constructor(name, size) {\\n    this.name = name;\\n    this.size = size;\\n  }\\n\\n};\\n","question":"Com qual construtor podemos estender com sucesso a classe `Dog`?"},{"answer":1,"explanation":["Com a palavra-chave `import`, todos os m\xf3dulos importados s\xe3o _pre-parsed_. Isso significa que os m\xf3dulos importados s\xe3o executados _primeiro_, o c\xf3digo no arquivo que importa o m\xf3dulo \xe9 executado _depois_.","Esta \xe9 uma diferen\xe7a entre `require()` no CommonJS e `import`! Com `require()`, voc\xea pode carregar depend\xeancias sob demanda enquanto o c\xf3digo est\xe1 sendo executado. Se tiv\xe9ssemos usado `require` em vez de `import`, `running index.js`,` running sum.js`, `3` teriam sido registrados no console."],"id":67,"options":["`running index.js`, `running sum.js`, `3`","`running sum.js`, `running index.js`, `3`","`running sum.js`, `3`, `running index.js`","`running index.js`, `undefined`, `running sum.js`"],"problem":"// index.js\\nconsole.log(\'running index.js\');\\nimport { sum } from \'./sum.js\';\\nconsole.log(sum(1, 2));\\n\\n// sum.js\\nconsole.log(\'running sum.js\');\\nexport const sum = (a, b) => a + b;\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["Todo s\xedmbolo (Symbol) \xe9 totalmente \xfanico. O objetivo do argumento passado ao s\xedmbolo \xe9 fornecer uma descri\xe7\xe3o ao s\xedmbolo. O valor do s\xedmbolo n\xe3o depende do argumento passado. Ao testarmos a igualdade, estamos criando dois s\xedmbolos totalmente novos: o primeiro `Symbol(\'foo\')` e o segundo `Symbol(\'foo\')`. Esses dois valores s\xe3o \xfanicos e n\xe3o s\xe3o iguais entre si, `Symbol(\'foo\') === Symbol(\'foo\')` retorna `false`."],"id":68,"options":["`true`, `true`, `false`","`false`, `true`, `false`","`true`, `false`, `true`","`true`, `true`, `true`"],"problem":"console.log(Number(2) === Number(2));\\nconsole.log(Boolean(false) === Boolean(false));\\nconsole.log(Symbol(\'foo\') === Symbol(\'foo\'));\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":2,"explanation":["Com o m\xe9todo `padStart`, podemos adicionar preenchimento (padding) ao in\xedcio de uma string. O valor passado para esse m\xe9todo \xe9 o comprimento _total_ da string junto com o preenchimento. A string `\\"Lydia Hallie\\"` tem um comprimento de `12`. `name.padStart(13)` insere 1 espa\xe7o no in\xedcio da string, porque 12 + 1 \xe9 13.","Se o argumento passado para o m\xe9todo `padStart` for menor que o comprimento da matriz, nenhum preenchimento ser\xe1 adicionado."],"id":69,"options":["`\\"Lydia Hallie\\"`, `\\"Lydia Hallie\\"`","`\\" Lydia Hallie\\"`, `\\" Lydia Hallie\\"` (`\\"[13x whitespace]Lydia Hallie\\"`, `\\"[2x whitespace]Lydia Hallie\\"`)","`\\" Lydia Hallie\\"`, `\\"Lydia Hallie\\"` (`\\"[1x whitespace]Lydia Hallie\\"`, `\\"Lydia Hallie\\"`)","`\\"Lydia Hallie\\"`, `\\"Lyd\\"`,"],"problem":"const name = \'Lydia Hallie\';\\nconsole.log(name.padStart(13));\\nconsole.log(name.padStart(2));\\n","question":"Qual \xe9 a sa\xedda?"},{"answer":0,"explanation":["Com o operador `+`, voc\xea pode concatenar seq\xfc\xeancias de caracteres (strings). Neste caso, estamos concatenando a string `\\"\ud83e\udd51\\"` com a string `\\"\ud83d\udcbb\\"`, resultando em `\\"\ud83e\udd51\ud83d\udcbb\\"`."],"id":70,"options":["`\\"\ud83e\udd51\ud83d\udcbb\\"`","`257548`","A string containing their code points","Error"],"problem":"console.log(\'\ud83e\udd51\' + \'\ud83d\udcbb\');\\n","question":"Qual \xe9 a sa\xedda?"}]')}}]);
//# sourceMappingURL=44.065cf8cc.chunk.js.map