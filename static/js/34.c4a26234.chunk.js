(this["webpackJsonpjs-challenge"]=this["webpackJsonpjs-challenge"]||[]).push([[34],{110:function(e){e.exports=JSON.parse('[{"answer":3,"explanation":["Unutar funkcije, najprije deklari\u0161emo varijablu `name` s` var`\\nklju\u010dne rije\u010di. To zna\u010di da se varijabla podi\u017ee (memorijski prostor je postavljen\\ntijekom faze izrade) sa zadanom vrijedno\u0161\u0107u `undefined`,\\ndok zapravo ne do\u0111emo do linije gdje definiramo varijablu. Mi\\njo\u0161 nismo definirali varijablu na liniji gdje poku\u0161avamo prijaviti\\nvarijabla `name`, tako da jo\u0161 uvijek sadr\u017ei vrijednost` undefined`.","Varijable s klju\u010dnom rije\u010di `let` (i` const`) su podignute, ali za razliku od njih\\n`var`, ne bivaju <i> inicijalizirane </i>. Nisu dostupni prije\\nlinije na kojo ih progla\u0161avamo (inicijaliziramo). To se naziva \\"temporal dead zone\\".\\nKada poku\u0161amo pristupiti varijablama prije nego \u0161to budu deklarirane,\\nJavaScript iz bacuje `ReferenceError`."],"id":0,"options":["\\"Lydia\\" i \\"undefined\\"","\\"Lydia\\" i \\"ReferenceError\\"","\\"ReferenceError\\" i \\"21\\"","`undefined` i` ReferenceError`"],"problem":"function sayHi() {\\n  console.log(name);\\n  console.log(age);\\n  var name = \\"Lydia\\";\\n  let age = 21;\\n}\\n\\nsayHi();\\n","question":"\u0160to je izlaz?"},{"answer":2,"explanation":["Zbog reda doga\u0111aja u JavaScriptu, povratni poziv `setTimeout`\\nfunction se zove * nakon \u0161to je izvr\u0161ena petlja. Od\\nvarijabla `i` u prvoj petlji je deklarirana pomo\u0107u klju\u010dne rije\u010di` var`,\\nta je vrijednost bila globalna. Tijekom petlje pove\u0107avamo vrijednost `i`\\nsvaki put \'1\', koriste\u0107i unarni operator `++`. Do vremena\\nPozvana je function povratnog poziva `setTimeout`,` i` je bila jednaka `3` u\\nu prvom primjeru.","U drugoj petlji, varijabla `i` je deklarirana pomo\u0107u` let`\\nklju\u010dna rije\u010d: varijable deklarirane s klju\u010dnom rije\u010di `let` (i` const`) su\\nblock-scoped (blok je sve izme\u0111u `{}`). Tijekom svake iteracije,\\n`i` \u0107e imati novu vrijednost, a svaka vrijednost \u0107e biti obuhva\u0107ena unutar petlje."],"id":1,"options":["`0 1 2` i` 0 1 2`","\\"0 1 2\\" i \\"3 3 3\\"","\\"3 3 3\\" i \\"0 1 2\\""],"problem":"for (var i = 0; i < 3; i++) {\\n  setTimeout(() => console.log(i), 1);\\n}\\n\\nfor (let i = 0; i < 3; i++) {\\n  setTimeout(() => console.log(i), 1);\\n}\\n","question":"\u0160to je izlaz?"},{"answer":1,"explanation":["Imajte na umu da je vrijednost \\"promjera\\" uobi\u010dajena function, dok je vrijednost promjera\\nvrijednost \\"perimetra\\" je function strelice.","Sa functionma strelica, klju\u010dna rije\u010d \\"this\\" odnosi se na njegovo trenutno\\nokolno podru\u010dje, za razliku od uobi\u010dajenih function! To zna\u010di kada\\nnazovemo \'perimetar\', ne odnosi se na objekt oblika, ve\u0107 na njegov\\nokru\u017eenje (primjerice, prozor).","Na tom objektu nema vrijednosti `radius` koja vra\u0107a` undefined`."],"id":2,"options":["\\"20\\" i \\"62.83185307179586\\"","\\"20\\" i \\"NaN\\"","\\"20\\" i \\"63\\"","\\"NaN\\" i \\"63\\""],"problem":"const shape = {\\n  radius: 10,\\n  diameter() {\\n    return this.radius * 2;\\n  },\\n  perimeter: () => 2 * Math.PI * this.radius\\n};\\n\\nshape.diameter();\\nshape.perimeter();\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["Unary plus poku\u0161ava pretvoriti operand u broj. \\"true\\" je \\"1\\",\\ni \\"false\\" je \\"0\\".","Niz \'\' Lydia \'\' je istinita vrijednost. Ono \u0161to zapravo tra\u017eimo jest\\n\\"je li ta istinita vrijednost la\u017ena?\\". Ovo vra\u0107a \\"false\\"."],"id":3,"options":["\\"1\\" i \\"false\\"","\\"false\\" i \\"NaN\\"","\\"false\\" i \\"false\\""],"problem":"+true;\\n!\\"Lydia\\";\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["U JavaScriptu su svi key-evi objekta stringovi (osim ako to nije simbol). \u010cak\\niako ih mo\u017eda ne * upisujemo kao * nizove, oni se uvijek pretvaraju\\nu String ispod \\"haube\\".","JavaScript tuma\u010di (ili odla\u017ee) izjave. Kada koristimo zagradu\\nnotacija, on vidi prvu otvarnu zagradu ```i nastavlja dalje do nje\\npronalazi zavr\u0161nu zagradu `]`. Tek tada \u0107e procijeniti\\nizjava.","`mouse [bird.size]`: Prvo procjenjuje `bird.size`, \u0161to je` `small``.\\n`mouse [\\" small \\"]` vra\u0107a \\"true\\"","Me\u0111utim, s to\u010dkastom notacijom, to se ne doga\u0111a. `mi\u0161a \'nema a\\nkey naziva se \'bird\', \u0161to zna\u010di da je `mouse.bird`` undefined`. Zatim,\\ntra\u017eimo \\"veli\u010dinu\\" koriste\u0107i to\u010dkovni zapis: `mouse.bird.size \'. Od\\n`mouse.bird` je` undefined`, zapravo pitamo `undefined.size`.\\nTo nije valjano, a bit \u0107e u pitanju pogre\u0161ka sli\u010dna onoj\\n`Cannot read property \\"size\\" of undefined`."],"id":4,"options":["`mouse.bird.size \'nije valjan","`mouse [bird.size]` nije va\u017ee\u0107a","`mi\u0161 [bird [\\" veli\u010dina \\"]]` nije va\u017ee\u0107a","Svi su valjani"],"problem":"const bird = {\\n  size: \\"small\\"\\n};\\n\\nconst mouse = {\\n  name: \\"Mickey\\",\\n  small: true\\n};\\n","question":"Koja je istina?"},{"answer":0,"explanation":["U JavaScriptu, svi objekti me\u0111usobno djeluju * referencom * kada ih postavljaju\\njednaki.","Prvo, varijabla `c` sadr\u017ei vrijednost objekta. Kasnije dodijelimo `d`\\ns istom referencom koju `c \'ima na objekt.","<img src = \\"https://i.imgur.com/ko5k0fs.png\\" width = \\"200\\">","Kada promijenite jedan objekt, mijenjate ih sve."],"id":5,"options":["\\"Zdravo\\"","\'Hej\'","`undefined`","\\"ReferenceError\\"","`TypeError`"],"problem":"let c = { greeting: \\"Hey!\\" };\\nlet d;\\n\\nd = c;\\nc.greeting = \\"Hello\\";\\nconsole.log(d.greeting);\\n","question":"\u0160to je izlaz?"},{"answer":2,"explanation":["`new Number ()` je ugra\u0111eni konstruktor function. Iako izgleda\\nkao broj, to zapravo nije broj: ima gomilu ekstra dodataka\\npa je zbog toga objekt.","Kada koristimo `==` operatora, on samo provjerava ima li isti\\n*vrijednost*. Obje imaju vrijednost `3`, pa se vra\u0107a \'true\'.","Me\u0111utim, kada koristimo `===` operator, obje vrijednosti * i * trebaju biti\\nisto. To nije: `new Number ()` nije broj, to je ** objekt **.\\nOba vra\u0107aju \\"false\\""],"id":6,"options":["`true`` false` `true`","`false`` false` `true`","`true`` false` `false`","`false`` true` `true`"],"problem":"let a = 3;\\nlet b = new Number(3);\\nlet c = 3;\\n\\nconsole.log(a == b);\\nconsole.log(a === b);\\nconsole.log(b === c);\\n","question":"\u0160to je izlaz?"},{"answer":3,"explanation":["function `colorChange` je stati\u010dna. Namijenjene su stati\u010dkim metodama\\n\u017eive samo na konstruktoru u kojem su stvoreni i ne mogu biti proslije\u0111eni \\nbilo kojem childu. Budu\u0107i da je `freddie` child, function je\\nnije proslije\u0111ena, i nije dostupan na `freddie` instanci: a\\nIzba\u010den je `TypeError`."],"id":7,"options":["\'naran\u010dasta\'","\\"ljubi\u010dasta\\"","\\"zelena\\"","`TypeError`"],"problem":"class Chameleon {\\n  static colorChange(newColor) {\\n    this.newColor = newColor;\\n    return this.newColor;\\n  }\\n\\n  constructor({ newColor = \\"green\\" } = {}) {\\n    this.newColor = newColor;\\n  }\\n}\\n\\nconst freddie = new Chameleon({ newColor: \\"purple\\" });\\nfreddie.colorChange(\\"orange\\");\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["Zapisuje objekt, jer smo upravo stvorili prazan objekt na\\nglobalni objekt! Kada smo pogre\u0161no ukucali `pozdrav` kao` greeting`, JS\\ninterpreter je zapravo to vidio kao `global.greeting = {}` (ili\\n`window.greeting = {}` u pregledniku).","Kako bismo to izbjegli, mo\u017eemo koristiti `` use strict \'\'. To osigurava to\\nda ste deklarirali varijablu prije nego je postavite na bilo \u0161to."],"id":8,"options":["`{}`","`ReferenceErrorgreetign nije definiran \'","`undefined`"],"problem":"let greeting;\\ngreetign = {}; // Typo!\\nconsole.log(greetign);\\n\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["To je mogu\u0107e u JavaScriptu, jer su funkcije objekti!\\n(Sve osim primitivnih tipova su objekti)","function je posebna vrsta objekta. Kod koji sami napi\u0161ete\\nnije stvarna function. function je objekt sa svojstvima.\\nOva nekretnina je nepovratna."],"id":9,"options":["Ni\u0161ta, ovo je u redu!","`SyntaxError`. Na ovaj na\u010din ne mo\u017eete dodavati svojstva funkciji.","`undefined`","\\"ReferenceError\\""],"problem":"function bark() {\\n  console.log(\\"Woof!\\");\\n}\\n\\nbark.animal = \\"dog\\";\\n","question":"\u0160to se doga\u0111a kada to u\u010dinimo?"},{"answer":0,"explanation":["Ne mo\u017eete dodati svojstva konstruktoru kao \u0161to mo\u017eete s uobi\u010dajenim\\nobjekti. Ako \u017eelite dodati zna\u010dajku svim objektima odjednom, imate\\numjesto toga koristiti prototip. Dakle, u ovom slu\u010daju,","bi u\u010dinio `member.getFullName ()`. Za\u0161to je to korisno? Re\u0107i \u0107e mo\\nda smo tu metodu dodali samom konstruktoru. Mo\u017eda ne svaki\\nPrimjer \\"Person\\" trebao je ovu metodu. To bi tro\u0161ilo puno memorije\\nscopa (prostora), jer bi oni jo\u0161 uvijek imali tu svojinu, koja uzima memoriju\\nscopa za svaku instancu. Umjesto toga, ako ga samo dodamo prototipu, mi\\n\u0107e mo je imati na jednom mjestu u memoriji, ali svi imaju pristup!"],"id":10,"options":["`TypeError`","`SyntaxError`","\\"Lydia Hallie\\"","`undefined`` undefined`"],"problem":"function Person(firstName, lastName) {\\n  this.firstName = firstName;\\n  this.lastName = lastName;\\n}\\n\\nconst member = new Person(\\"Lydia\\", \\"Hallie\\");\\nPerson.getFullName = function() {\\n  return `${this.firstName} ${this.lastName}`;\\n};\\n\\nconsole.log(member.getFullName());\\n","question":"Kakav je rezultat?"},{"answer":0,"explanation":["Za `sarah` nismo koristili klju\u010dnu rije\u010d` new`. Kada koristite \\"new\\", to\\nodnosi se na new prazni objekt koji stvaramo. Me\u0111utim, ako ne dodate\\n`new` se odnosi na ** globalni objekt **!","Rekli smo da je \\"this.ime\\" jednako \\"Sarah\\" i `this.prezime`\\njednak je \\"Smithu\\". Ono \u0161to smo zapravo u\u010dinili jest definiranje\\n`global.ime = \'Sarah\'` i` global.prezime =\' Smith\'`. `sarah`\\nsam je ostavljen \'undefined\'."],"id":11,"options":["`Person {ime:\\" Lydia \\", prezime:\\" Hallie \\"} i` undefined`","`Person {ime:\\" Lydia \\", prezime:\\" Hallie \\"} i\\n  `Person {ime:\\" Sarah \\", prezime:\\" Smith \\"}`","`Person {ime:\\" Lydia \\", prezime:\\" Hallie \\"}` i `{}`","`Person {ime:\\" Lydia \\", prezime:\\" Hallie \\"} i\\n  `ReferenceError`"],"problem":"function Person(firstName, lastName) {\\n  this.firstName = firstName;\\n  this.lastName = lastName;\\n}\\n\\nconst lydia = new Person(\\"Lydia\\", \\"Hallie\\");\\nconst sarah = Person(\\"Sarah\\", \\"Smith\\");\\n\\nconsole.log(lydia);\\nconsole.log(sarah);\\n","question":"\u0160to je izlaz?"},{"answer":3,"explanation":["Tijekom ** capturing ** doga\u0111aj prolazi kroz pretka\\nelemente do ciljnog elementa. Zatim dose\u017ee ** target **\\ni ** bubbling **.","<img src = \\"https://i.imgur.com/N18oRgd.png\\" width = \\"200\\">"],"id":12,"options":["Target > Capturing > Bubbling","Bubbling > Target > Capturing","Target > Bubbling > Capturing","Capturing > Target > Bubbling"],"problem":"","question":"Koje su tri faze propagiranja doga\u0111aja?"},{"answer":1,"explanation":["Svi objekti imaju prototipove, osim ** osnovnog objekta **. Upori\u0161te\\nobjekt ima pristup nekim metodama i svojstvima, kao \u0161to je `.toString`.\\nTo je razlog za\u0161to mo\u017eete koristiti ugra\u0111ene JavaScript metode! Sve od\\ntakve su metode dostupne na prototipu. Iako JavaScript ne mo\u017ee\\nprona\u0107i ga izravno na va\u0161em objektu, ide niz lanac prototipa i\\nnalazi ga tamo, \u0161to ga \u010dini dostupnim."],"id":13,"options":["la\u017eno",""],"problem":"","question":"Svi objekti imaju prototipove."},{"answer":2,"explanation":["JavaScript je ** dinami\u010dki upisani jezik **: ne navodimo \u0161to\\nvrste su odre\u0111ene varijable. Vrijednosti se mogu automatski pretvoriti u\\ndrugi tip bez va\u0161eg znanja, koji se zove * implicitni tip\\nprisila *. ** Prisila ** pretvara iz jednog tipa u drugi.","U ovom primjeru JavaScript pretvara broj `1` u niz, u\\nkako bi function imala smisla i vratila vrijednost. Tijekom\\ndodavanje numeri\u010dkog tipa (`1`) i tipa niza (` \'2\'`), broja\\nse tretira kao niz. Mo\u017eemo sli\u010dno spojiti\\n\\"\\" Zdravo \\"+\\" Svijet \\"`, tako da se ovdje doga\u0111a ``````````````````\\nvra\u0107a `\\" 12 \\"`."],"id":14,"options":["\\"NaN\\"","`TypeError`","\\"12\\"","`3`"],"problem":"function sum(a, b) {\\n  return a + b;\\n}\\n\\nsum(1, \\"2\\");\\n","question":"\u0160to je izlaz?"},{"answer":2,"explanation":["** postfix ** unarni operator `++`:","Vra\u0107a vrijednost (ovo vra\u0107a `0`)","Pove\u0107ava vrijednost (broj je sada `1`)","** prefiks ** unary operator `++`:","Pove\u0107ava vrijednost (broj je sada `2`)","Vra\u0107a vrijednost (ovo vra\u0107a `2`)","Ovo vra\u0107a `0 2 2`."],"id":15,"options":["`1`` 1` `2`","`1`` 2` `2`","`0`` 2` `2`","`0`` 1` `2`"],"problem":"let number = 0;\\nconsole.log(number++);\\nconsole.log(++number);\\nconsole.log(number);\\n","question":"\u0160to je izlaz?"},{"answer":1,"explanation":["Ako koristite literale s oznakom predlo\u017eaka, vrijednost prvog argumenta je\\nuvijek niz vrijednosti vrijednosti niza. Preostali argumenti dobivaju\\nvrijednosti pro\u0161lih izraza!"],"id":16,"options":["`` Lydia` ``````````````````````````````````````","```````````````````````````````````````````````````````````````````````````","`` Lydia` ``````````````````````````````````````````````````````````"],"problem":"function getPersonInfo(one, two, three) {\\n  console.log(one);\\n  console.log(two);\\n  console.log(three);\\n}\\n\\nconst person = \\"Lydia\\";\\nconst age = 21;\\n\\ngetPersonInfo`${person} is ${age} years old`;\\n","question":"\u0160to je izlaz?"},{"answer":2,"explanation":["Prilikom ispitivanja jednakosti, primitivi se uspore\u0111uju prema njihovoj * vrijednosti *, dok\\nobjekti se uspore\u0111uju prema njihovoj * referenci *. JavaScript provjerava ako\\nobjekti imaju referencu na isto mjesto u memoriji.","Dva predmeta koje uspore\u0111ujemo nemaju: objekt mi\\nproslije\u0111eno kao parametar odnosi se na drugo mjesto u memoriji od\\nobjekt koji smo koristili kako bismo provjerili jednakost.","Zato i `{age: 18} === {age: 18}` i\\n`{age: 18} == {age: 18}` return `false \'."],"id":17,"options":["\\"Vi ste odrasla osoba!\\"","\\"Vi ste jo\u0161 uvijek odrasla osoba.\\"","\'Hmm .. Nemam godina za koju pretpostavljam\'"],"problem":"function checkAge(data) {\\n  if (data === { age: 18 }) {\\n    console.log(\\"You are an adult!\\");\\n  } else if (data == { age: 18 }) {\\n    console.log(\\"You are still an adult.\\");\\n  } else {\\n    console.log(`Hmm.. You don\'t have an age I guess`);\\n  }\\n}\\n\\ncheckAge({ age: 18 });\\n","question":"\u0160to je izlaz?"},{"answer":2,"explanation":["Operator spread (`... args`.) Vra\u0107a niz s argumentima.\\narray je objekt, pa `typeof args` vra\u0107a` `objekt \'`"],"id":18,"options":["`\\" broj \\"","`` niz \'\'","`` objekt \'\'","\\"NaN\\""],"problem":"\\nfunction getAge(...args) {\\n  console.log(typeof args);\\n}\\n\\ngetAge(21);\\n","question":"\u0160to je izlaz?"},{"answer":2,"explanation":["Sa `` use strict \'\', mo\u017eete se uvjeriti da nije slu\u010dajno\\ndeklarisana globalna varijabla. Nikada nismo objavili varijablu \\"age\\" i\\nbudu\u0107i da koristimo `` use strict \'\', ona \u0107e na\u010diniti referentnu pogre\u0161ku. Ako mi\\nnije koristio \\"\\" strict \\", to bi i\u0161lo od vlasni\u0161tva\\n`age` bi se dodao u globalni objekt."],"id":19,"options":["`21`","`undefined`","\\"ReferenceError\\"","`TypeError`"],"problem":"function getAge() {\\n  \\"use strict\\";\\n  age = 21;\\n  console.log(age);\\n}\\n\\ngetAge();\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["`eval` procjenjuje kodove koji su pro\u0161li kao niz. Ako je to izraz,\\nkao u ovom slu\u010daju, on ocjenjuje izraz. Izraz je\\n`10 * 10 + 5`. Ovo vra\u0107a broj \\"105\\"."],"id":20,"options":["\\"105\\"","`\\" 105 \\"`","`TypeError`","`\\" 10 * 10 + 5 \\"`"],"problem":"const sum = eval(\\"10*10+5\\");\\n","question":"\u0160to je vrijednost `suma \'?"},{"answer":1,"explanation":["Podaci spremljeni u `sessionStorage` se uklanjaju nakon zatvaranja * tab *.","Ako ste koristili `localStorage`, podaci bi bili tamo zauvijek, osim ako\\nna primjer, `localStorage.clear ()` je pozvan."],"id":21,"options":["Kada korisnik zatvori karticu.","Kada korisnik zatvori cijeli preglednik, ne samo karticu.","Kada korisnik isklju\u010di svoje ra\u010dunalo."],"problem":"sessionStorage.setItem(\\"cool_secret\\", 123);\\n","question":"Koliko dugo je cool \\\\ _secret dostupan?"},{"answer":1,"explanation":["Pomo\u0107u klju\u010dne rije\u010di `var` mo\u017eete deklarirati vi\u0161e varijabli s istom\\nIme. Varijabla \u0107e tada sadr\u017eavati zadnju vrijednost.","To ne mo\u017eete u\u010diniti s `let` ili` const` jer su blokirani."],"id":22,"options":["`8`","\\"10\\"","`SyntaxError`","\\"ReferenceError\\""],"problem":"var num = 8;\\nvar num = 10;\\n\\nconsole.log(num);\\n","question":"\u0160to je izlaz?"},{"answer":2,"explanation":["Sve tipke objekta (osim simbola) su \u017eice ispod haube, \u010dak i ako\\nne upisujete sami kao niz znakova. To je razlog za\u0161to\\n`obj.hasOwnProperty (\'1\')` tako\u0111er vra\u0107a true.","To ne radi tako za skup. U na\u0161em setu ne postoji \\"1\\":\\n`set.has (\'1\')` vra\u0107a `false`. Ima numeri\u010dki tip \\"1\\",\\n`set.has (1)` vra\u0107a `true`."],"id":23,"options":["`false`` true` `false`` true`","`false`` true` `true`` true`","`true`` true` `false`` true`","`true`` true` `true`` true`"],"problem":"const obj = { 1: \\"a\\", 2: \\"b\\", 3: \\"c\\" };\\nconst set = new Set([1, 2, 3, 4, 5]);\\n\\nobj.hasOwnProperty(\\"1\\");\\nobj.hasOwnProperty(1);\\nset.has(\\"1\\");\\nset.has(1);\\n","question":"\u0160to je izlaz?"},{"answer":2,"explanation":["Ako imate dva klju\u010da s istim imenom, klju\u010d \u0107e biti zamijenjen. To\\ni dalje \u0107e biti na prvom mjestu, ali s posljednjom navedenom vrijedno\u0161\u0107u."],"id":24,"options":["`{a:\\" jedan \\", b:\\" dva \\"}`","`{b:\\" dva \\", a:\\" tri \\"}`","`{a:\\" tri \\", b:\\" dva \\"}`","`SyntaxError`"],"problem":"const obj = { a: \\"one\\", b: \\"two\\", a: \\"three\\" };\\nconsole.log(obj);\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["Kontekst izvr\u0161enja baze je kontekst globalnog izvr\u0161avanja: to je ono \u0161to je\\ndostupno svugdje u va\u0161em kodu."],"id":25,"options":["la\u017eno","to ovisi",""],"problem":"","question":"Globalni kontekst izvo\u0111enja JavaScripta za vas stvara dvije stvari: globalni objekt i \\"ovu\\" klju\u010dnu rije\u010d."},{"answer":2,"explanation":["Izjava `continue` preska\u010de iteraciju ako je odre\u0111eno stanje\\nvra\u0107a \\"true\\"."],"id":26,"options":["`1`` 2`","`1`` 2` `3`","`1`` 2` `4`","`1`` 3` `4`"],"problem":"for (let i = 1; i < 5; i++) {\\n  if (i === 3) continue;\\n  console.log(i);\\n}\\n\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["`String \'je ugra\u0111eni konstruktor, kojem mo\u017eemo dodati svojstva. ja\\nsamo je dodao metodu u svoj prototip. Primitivni nizovi su\\nautomatski se pretvara u string objekt, generiran stringom\\nprototipna function. Dakle, svi nizovi (objekti stringova) imaju pristup tome\\nna\u010din!"],"id":27,"options":["`` Ve\u0107 daj Lizijinu pizzu! ``","`TypeErrornije function`","`SyntaxError`","`undefined`"],"problem":"String.prototype.giveLydiaPizza = () => {\\n  return \\"Just give Lydia pizza already!\\";\\n};\\n\\nconst name = \\"Lydia\\";\\n\\nname.giveLydiaPizza();\\n","question":"\u0160to je izlaz?"},{"answer":1,"explanation":["Tipke objekta automatski se pretvaraju u nizove. Poku\u0161avamo\\npostavite objekt kao klju\u010d za objekt \\"a\\", s vrijedno\u0161\u0107u \\"123\\".","Me\u0111utim, kada stringificiramo objekt, on postaje `` [Objekt objekt] \'`. Tako\\nono \u0161to ovdje govorimo je da je `a [\\" Objekt objekt \\"] = 123`. Onda, mi\\nmo\u017ee ponovno poku\u0161ati u\u010diniti isto. \\"c\\" je jo\u0161 jedan objekt koji jesmo\\nimplicitno ograni\u010davaju. Dakle, `a [\\" Objekt objekt \\"] = 456`.","Zatim zapisujemo `a [b]`, \u0161to je zapravo `a [\\" Objekt objekt \\"]`. Upravo smo postavili\\nda na `456`, tako da se vra\u0107a` 456`."],"id":28,"options":["\'123\'","\\"456\\"","`undefined`","\\"ReferenceError\\""],"problem":"const a = {};\\nconst b = { key: \\"b\\" };\\nconst c = { key: \\"c\\" };\\n\\na[b] = 123;\\na[c] = 456;\\n\\nconsole.log(a[b]);\\n","question":"\u0160to je izlaz?"},{"answer":1,"explanation":["Imamo funkciju \\"setTimeout\\" i prvo je pozvali. Ipak, bio je prijavljen\\nposljednji.","To je zato \u0161to u preglednicima nemamo samo runtime engine, mi\\ntako\u0111er imaju ne\u0161to \u0161to se zove \\"WebAPI\\". \\"WebAPI\\" nam daje\\n`setTimeout` function za po\u010detak, i na primjer DOM.","Nakon \u0161to je * callback * preusmjeren na WebAPI, function `setTimeout`\\nsam (ali ne i povratni poziv!) iska\u010de iz stog.","<img src = \\"https://i.imgur.com/X5wsHOg.png\\" width = \\"200\\">","Sada se `foo` poziva i` `Prvo`` se bilje\u017ei.","<img src = \\"https://i.imgur.com/Pvc0dGq.png\\" width = \\"200\\">","`foo` je iska\u010den iz stog, i` baz` se poziva. \\"Tre\u0107i\\" dobiva\\nprijavljeni.","<img src = \\"https://i.imgur.com/WhA2bCP.png\\" width = \\"200\\">","WebAPI ne mo\u017ee jednostavno dodati stvari u stog kad god je spreman.\\nUmjesto toga, on povla\u010di funkciju povratnog poziva u ne\u0161to \u0161to se zove\\n*red*.","<img src = \\"https://i.imgur.com/NSnDZmU.png\\" width = \\"200\\">","Ovo je mjesto gdje petlja doga\u0111aja po\u010dinje raditi. ** ** krug doga\u0111aja ** gleda\\nred i red za zadatke. Ako je stog prazan, uzima prvi\\nstvar u redu i gura je u stog.","<img src = \\"https://i.imgur.com/uyiScAI.png\\" width = \\"200\\">","`bar` se priziva,` `Second`` se bilje\u017ei, i on se pojavio\\nstog."],"id":29,"options":["`Prvi`` Drugi` `Tre\u0107i`","`Prvi`` Tre\u0107i` `Drugi`","`Drugi`` Prvi` `Tre\u0107i`","`Drugi`` Tre\u0107i` `Prvi`"],"problem":"const foo = () => console.log(\\"First\\");\\nconst bar = () => setTimeout(() => console.log(\\"Second\\"));\\nconst baz = () => console.log(\\"Third\\");\\n\\nbar();\\nfoo();\\nbaz();\\n","question":"\u0160to je izlaz?"},{"answer":2,"explanation":["Najdublji ugnije\u017e\u0111eni element koji je uzrokovao doga\u0111aj je cilj\\ndoga\u0111aj. Mo\u017eete zaustaviti mjehuri\u0107e \'event.stopPropagation\'"],"id":30,"options":["Vanjski \'div\'","Unutarnji \'div\'","`gumb \'","Niz svih ugnije\u017e\u0111enih elemenata."],"problem":"\\n<div onclick=\\"console.log(\'first div\')\\">\\n  <div onclick=\\"console.log(\'second div\')\\">\\n    <button onclick=\\"console.log(\'button\')\\">\\n      Click!\\n    </button>\\n  </div>\\n</div>\\n\\n","question":"\u0160to je event.target kada kliknete na gumb?"},{"answer":0,"explanation":["Ako kliknemo `p`, vidimo dva zapisa:` p` i `div`. Tijekom doga\u0111aja\\nrazmno\u017eavanje, postoje 3 faze: hvatanje, ciljanje i mjehuri\u0107e. Po\\nzadani, rukovatelji doga\u0111aja izvr\u0161avaju se u fazi mjehuri\u0107a (osim ako vi\\npostavite `useCapture` na` true`). Ide od najdubljih ugnije\u017e\u0111enih elemenata\\nvan."],"id":31,"options":["`p`` div`","`div`` p`","p","\\"div\\""],"problem":"<div onclick=\\"console.log(\'div\')\\">\\n  <p onclick=\\"console.log(\'p\')\\">\\n    Click here!\\n  </p>\\n</div>\\n","question":"Kada kliknete na paragraf, \u0161to je zapisani izlaz?"},{"answer":3,"explanation":["S oba, mo\u017eemo proslijediti objekt kojem \u017eelimo klju\u010dnu rije\u010d \\"this\\"\\nodnosi se na. Me\u0111utim, `.call` se tako\u0111er * izvr\u0161ava odmah *!","`.bind.` vra\u0107a * copy * funkcije, ali s vezanim kontekstom! To\\nse ne izvr\u0161ava odmah."],"id":32,"options":["`undefined is 21`` Lydia je 21`","function funkcije","`Lydia je 21`` Lydia je 21`","`Lydia je 21`` function`"],"problem":"const person = { name: \\"Lydia\\" };\\n\\nfunction sayHi(age) {\\n  console.log(`${this.name} is ${age}`);\\n}\\n\\nsayHi.call(person, 21);\\nsayHi.bind(person, 21);\\n","question":"\u0160to je izlaz?"},{"answer":1,"explanation":["function `sayHi` vra\u0107a vra\u0107enu vrijednost odmah\\npozvana function (IIFE). Ova function vratila je `0`, \u0161to je tip\\n` \\"Broj\\"`.","FYI: postoji samo 7 ugra\u0111enih tipova: `null`,` undefined`, `boolean`,\\n\\"broj\\", \\"niz\\", \\"objekt\\" i \\"simbol\\". `` function \'\' nije tip,\\nbudu\u0107i da su funkcije objekti, to je tipa `` objekta \'`."],"id":33,"options":["`\\" objekt \\"`","`\\" broj \\"","function \\"\\"","`\\" undefined \\"`"],"problem":"function sayHi() {\\n  return (() => 0)();\\n}\\n\\ntypeof sayHi();\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["Postoji samo \u0161est krivotvorenih vrijednosti:","`undefined`","\\"null\\"","\\"NaN\\"","`0`","`\'\'` (prazan niz)","\\"false\\"","Konstruktori function, kao \u0161to su \'new Number\' i \'new Boolean\' su istiniti."],"id":34,"options":["`0`,` ```,` undefined`","`0`,` new Number (0) `,` \'\' `,` new Boolean (false) `,` undefined \'","`0`,` \'\' `,` new Boolean (false) `,` undefined`","Svi su oni la\u017eni"],"problem":"0;\\nnew Number(0);\\n(\\"\\");\\n(\\" \\");\\nnew Boolean(false);\\nundefined;\\n","question":"Koja od ovih vrijednosti su neistinite?"},{"answer":1,"explanation":["`typeof 1` vra\u0107a` `broj \'\'. `typeof\\" number \\"` return `` string \\"`"],"id":35,"options":["`\\" broj \\"","niz \\"\\"","`` objekt \'\'","`\\" undefined \\"`"],"problem":"console.log(typeof typeof 1);\\n\\n","question":"\u0160to je izlaz?"},{"answer":2,"explanation":["Kada postavite vrijednost na element u nizu koji prema\u0161uje duljinu\\niz niza, JavaScript stvara ne\u0161to \u0161to se naziva \\"prazni utori\\". To\\nzapravo imaju vrijednost `undefined`, ali vidjet \u0107ete ne\u0161to poput:","`[1, 2, 3, 7 x prazno, 11]`","ovisno o tome gdje ga pokre\u0107ete (razlikuje se za svaki preglednik, \u010dvor,\\nitd)"],"id":36,"options":["`[1, 2, 3, 7 x null, 11]`","`[1, 2, 3, 11]`","`[1, 2, 3, 7 x prazno, 11]`","`SyntaxError`"],"problem":"const numbers = [1, 2, 3];\\nnumbers[10] = 11;\\nconsole.log(numbers);\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["Blok `catch` prima argument` x`. To nije isti `x` kao\\nvarijablu kada proslijedimo argumente. Ova varijabla `x` je blokirana.","Kasnije smo postavili ovu varijablu bloka koja je jednaka `1` i postavili vrijednost\\nvarijable `y \'. Sada, zapisujemo blok-scoped varijablu `x`, koja je\\njednako \\"1\\".","Izvan \'catch\' bloka, `x \'je i dalje` undefined`, a `y` je` 2`.\\nKada \u017eelimo `console.log (x)` izvan `catch` bloka, to\\nvra\u0107a `undefined` i` y` vra\u0107a `2`."],"id":37,"options":["`1`` undefined `` 2`","`undefined`` undefined` `undefined`","`1`` 1` `2`","`1`` undefined` `undefined`"],"problem":"(() => {\\n  let x, y;\\n  try {\\n    throw new Error();\\n  } catch (x) {\\n    (x = 1), (y = 2);\\n    console.log(x);\\n  }\\n  console.log(x);\\n  console.log(y);\\n})();\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["JavaScript ima samo primitivne tipove i objekte.","Primitivni tipovi su \\"boolean\\", \\"null\\", \\"undefined\\", \\"bigint\\", \\"number\\",\\n\'string\' i \'simbol\'.","Ono \u0161to razlikuje primitiv od objekta je to \u0161to primitivci to ne \u010dine\\nimaju bilo kakva svojstva ili metode; me\u0111utim, to \u0107ete primijetiti\\n`\'foo\'.toUpperCase ()` vrednuje za\' \'FOO\'` i ne rezultira a\\n`TypeError`. To je zato \u0161to kada poku\u0161ate pristupiti svojstvu ili metodi\\nna primitivnom poput stringa, JavaScript \u0107e implicitet omotati objekt\\nkoriste\u0107i jednu od klasa omota\u010da, tj. `String \', a zatim odmah\\nodbacite omota\u010d nakon \u0161to se izraz procijeni. Svi primitivci\\nosim \\"null\\" i \\"undefined\\" pokazuju ovo pona\u0161anje."],"id":38,"options":["primitivni ili objektni","function ili objekt","trik pitanje! samo objekti","broj ili objekt"],"problem":"","question":"Sve u JavaScriptu je ili ..."},{"answer":2,"explanation":["\\"[1, 2]\\" je na\u0161a po\u010detna vrijednost. To je vrijednost s kojom po\u010dinjemo i\\nvrijednost prvog `acc`. Tijekom prvog kruga, \\"acc\\" je \\"[1,2]\\",\\ni `cur` je` [0, 1] `. Spojimo ih, \u0161to rezultira\\n`[1, 2, 0, 1]`.","Tada je `[1, 2, 0, 1]` `acc` i` [2, 3] `````. Ulan\u010davamo se\\ni dobiti `[1, 2, 0, 1, 2, 3]`"],"id":39,"options":["`[0, 1, 2, 3, 1, 2]`","`[6, 1, 2]`","\\"[1, 2, 0, 1, 2, 3]\\"","`[1, 2, 6]`"],"problem":"[[0, 1], [2, 3]].reduce(\\n  (acc, cur) => {\\n    return acc.concat(cur);\\n  },\\n  [1, 2]\\n);\\n","question":"\u0160to je izlaz?"},{"answer":1,"explanation":["`null` je la\u017ean. `! null` vra\u0107a \'true\'. `! true \'vra\u0107a\\" false \\".","```` je neistinit. `!\\" `` vra\u0107a `true \'. `! true \'vra\u0107a\\" false \\".","\\"1\\" je istina. `! 1` vra\u0107a \'false\'. `! false \'vra\u0107a\' true \'."],"id":40,"options":["`false`` true` `false`","`false`` false` `true`","`false`` true` `true`","`true`` true` `false`"],"problem":"!!null;\\n!!\\"\\";\\n!!1;\\n","question":"\u0160to je izlaz?"},{"answer":0,"explanation":["Vra\u0107a jedinstveni ID. Taj se ID mo\u017ee koristiti za brisanje tog intervala\\n`clearInterval ()` function."],"id":41,"options":["jedinstveni ID","odre\u0111ena koli\u010dina milisekundi","pro\u0161la function","`undefined`"],"problem":"setInterval(() => console.log(\\"Hi\\"), 1000);\\n","question":"\u0160to se vra\u0107a metoda `setInterval`?"},{"answer":0,"explanation":["Niz je iterabilan. Operator \u0161irenja mapira svaki znak\\niterabilan na jedan element."],"id":42,"options":["`[\\" L \\",\\" y \\",\\" d \\",\\" i \\",\\" a \\"]`","`[\\" Lydia \\"]`","`[[],\\" Lydia \\"]`","`[[\\" L \\",\\" y \\",\\" d \\",\\" i \\",\\" a \\"]]`"],"problem":"[...\\"Lydia\\"];\\n","question":"\u0160to se to vra\u0107a?"}]')}}]);
//# sourceMappingURL=34.c4a26234.chunk.js.map